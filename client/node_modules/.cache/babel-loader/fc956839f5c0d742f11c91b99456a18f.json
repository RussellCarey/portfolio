{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/Canvas/Index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState, useEffect } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport styled from \"styled-components\";\nimport { ReactSketchCanvas } from \"react-sketch-canvas\";\nimport CanvasControls from \"./CanvasControls\";\nimport { getDrawingData } from \"./services/dbService\";\nimport PopupComp from \"./Popup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n`;\n_c = Container;\n\nconst Index = _ref => {\n  _s();\n\n  let {\n    canvasRef\n  } = _ref;\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const [canDraw, setCanDraw] = useState(false);\n  const [showPopup, setShowPopup] = useState(false);\n  const [popupMessage, setPopupMessage] = useState([\"\"]); // Get current drawing state from the DB..\n\n  const getInitialDrawing = async () => {\n    const drawingData = await getDrawingData();\n    const paths = await JSON.parse(drawingData.data.data.rows[0].data);\n    await canvasRef.current.loadPaths(paths);\n  };\n\n  useEffect(() => {\n    getInitialDrawing();\n  }, []);\n\n  const onDraw = async () => {\n    // On clicking the BG show the drawing mode..\n    if (!canDraw) {\n      setPopupMessage([`Activated the drawing mode!`, `Anyone can add the the canvas and create a community drawing.`, `The erase button will erase the whole drawing, save will upload and overwrite the image and close will close this mode!`, `Have fun.`]);\n      setShowPopup(true);\n    }\n\n    if (!canDraw) setCanDraw(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    onClick: () => onDraw(),\n    children: [showPopup ? /*#__PURE__*/_jsxDEV(PopupComp, {\n      setShowPopup: setShowPopup,\n      message: popupMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 20\n    }, this) : null, canDraw ? /*#__PURE__*/_jsxDEV(CanvasControls, {\n      canvasRef: canvasRef,\n      setCanDraw: setCanDraw,\n      setPopupMessage: setPopupMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(ReactSketchCanvas, {\n      ref: canvasRef,\n      canvasColor: \"transparent\",\n      width: canDraw ? \"100vw\" : \"0\",\n      height: canDraw ? \"100vh\" : \"0\",\n      strokeWidth: canDraw ? 3 : 0,\n      strokeColor: theme.borderColor,\n      withTimestamp: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"SCJXPc2yTORC2duz4YmgTB5oumA=\");\n\n_c2 = Index;\nexport default Index;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Index\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/Canvas/Index.tsx"],"names":["useContext","useState","useEffect","ThemeContext","styled","ReactSketchCanvas","CanvasControls","getDrawingData","PopupComp","Container","div","Index","canvasRef","theme","canDraw","setCanDraw","showPopup","setShowPopup","popupMessage","setPopupMessage","getInitialDrawing","drawingData","paths","JSON","parse","data","rows","current","loadPaths","onDraw","borderColor"],"mappings":";;;AAAA,SAA4BA,UAA5B,EAAwCC,QAAxC,EAAkDC,SAAlD,QAAmE,OAAnE;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAqBC,iBAArB,QAA8C,qBAA9C;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,OAAOC,SAAP,MAAsB,SAAtB;;AAEA,MAAMC,SAAS,GAAGL,MAAM,CAACM,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,CANA;KAAMD,S;;AAYN,MAAME,KAAsC,GAAG,QAAmB;AAAA;;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AAChE,QAAM;AAAEC,IAAAA;AAAF,MAAYb,UAAU,CAACG,YAAD,CAA5B;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAW,CAAC,EAAD,CAAX,CAAhD,CALgE,CAOhE;;AACA,QAAMmB,iBAAiB,GAAG,YAAY;AACpC,UAAMC,WAAW,GAAG,MAAMd,cAAc,EAAxC;AACA,UAAMe,KAAK,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWH,WAAW,CAACI,IAAZ,CAAiBA,IAAjB,CAAsBC,IAAtB,CAA2B,CAA3B,EAA8BD,IAAzC,CAApB;AACA,UAAMb,SAAS,CAACe,OAAV,CAAkBC,SAAlB,CAA4BN,KAA5B,CAAN;AACD,GAJD;;AAMApB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMS,MAAM,GAAG,YAAY;AACzB;AACA,QAAI,CAACf,OAAL,EAAc;AACZK,MAAAA,eAAe,CAAC,CACb,6BADa,EAEb,+DAFa,EAGb,yHAHa,EAIb,WAJa,CAAD,CAAf;AAOAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AACD,QAAI,CAACH,OAAL,EAAcC,UAAU,CAAC,IAAD,CAAV;AACf,GAbD;;AAeA,sBACE,QAAC,SAAD;AAAW,IAAA,OAAO,EAAE,MAAMc,MAAM,EAAhC;AAAA,eACGb,SAAS,gBAAG,QAAC,SAAD;AAAW,MAAA,YAAY,EAAEC,YAAzB;AAAuC,MAAA,OAAO,EAAEC;AAAhD;AAAA;AAAA;AAAA;AAAA,YAAH,GAAsE,IADlF,EAGGJ,OAAO,gBACN,QAAC,cAAD;AAAgB,MAAA,SAAS,EAAEF,SAA3B;AAAsC,MAAA,UAAU,EAAEG,UAAlD;AAA8D,MAAA,eAAe,EAAEI;AAA/E;AAAA;AAAA;AAAA;AAAA,YADM,GAEJ,IALN,eAOE,QAAC,iBAAD;AACE,MAAA,GAAG,EAAEP,SADP;AAEE,MAAA,WAAW,EAAC,aAFd;AAGE,MAAA,KAAK,EAAEE,OAAO,GAAG,OAAH,GAAa,GAH7B;AAIE,MAAA,MAAM,EAAEA,OAAO,GAAG,OAAH,GAAa,GAJ9B;AAKE,MAAA,WAAW,EAAEA,OAAO,GAAG,CAAH,GAAO,CAL7B;AAME,MAAA,WAAW,EAAED,KAAK,CAACiB,WANrB;AAOE,MAAA,aAAa,EAAE;AAPjB;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CApDD;;GAAMnB,K;;MAAAA,K;AAsDN,eAAeA,KAAf","sourcesContent":["import { FunctionComponent, useContext, useState, useEffect } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport styled from \"styled-components\";\nimport { CanvasPath, ReactSketchCanvas } from \"react-sketch-canvas\";\n\nimport CanvasControls from \"./CanvasControls\";\nimport { getDrawingData } from \"./services/dbService\";\nimport PopupComp from \"./Popup\";\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n`;\n\ninterface ICanvasProps {\n  canvasRef: React.MutableRefObject<any>;\n}\n\nconst Index: FunctionComponent<ICanvasProps> = ({ canvasRef }) => {\n  const { theme } = useContext(ThemeContext);\n  const [canDraw, setCanDraw] = useState(false);\n\n  const [showPopup, setShowPopup] = useState(false);\n  const [popupMessage, setPopupMessage] = useState<string[]>([\"\"]);\n\n  // Get current drawing state from the DB..\n  const getInitialDrawing = async () => {\n    const drawingData = await getDrawingData();\n    const paths = await JSON.parse(drawingData.data.data.rows[0].data);\n    await canvasRef.current.loadPaths(paths);\n  };\n\n  useEffect(() => {\n    getInitialDrawing();\n  }, []);\n\n  const onDraw = async () => {\n    // On clicking the BG show the drawing mode..\n    if (!canDraw) {\n      setPopupMessage([\n        `Activated the drawing mode!`,\n        `Anyone can add the the canvas and create a community drawing.`,\n        `The erase button will erase the whole drawing, save will upload and overwrite the image and close will close this mode!`,\n        `Have fun.`,\n      ]);\n\n      setShowPopup(true);\n    }\n    if (!canDraw) setCanDraw(true);\n  };\n\n  return (\n    <Container onClick={() => onDraw()}>\n      {showPopup ? <PopupComp setShowPopup={setShowPopup} message={popupMessage} /> : null}\n\n      {canDraw ? (\n        <CanvasControls canvasRef={canvasRef} setCanDraw={setCanDraw} setPopupMessage={setPopupMessage} />\n      ) : null}\n\n      <ReactSketchCanvas\n        ref={canvasRef}\n        canvasColor=\"transparent\"\n        width={canDraw ? \"100vw\" : \"0\"}\n        height={canDraw ? \"100vh\" : \"0\"}\n        strokeWidth={canDraw ? 3 : 0}\n        strokeColor={theme.borderColor}\n        withTimestamp={true}\n      />\n    </Container>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}