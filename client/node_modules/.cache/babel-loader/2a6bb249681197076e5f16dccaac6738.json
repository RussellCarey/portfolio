{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/BottomBar/StartMenu.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport { StartMenuButton, StartMenuContainer } from \"./styles/styled\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StartMenu = _ref => {\n  _s();\n\n  let {\n    themeState,\n    canRightClick,\n    setCanRightClick\n  } = _ref;\n  const {\n    themeChangeMap,\n    setLightTheme,\n    setDarkTheme\n  } = useContext(ThemeContext);\n  const [isDark, setIsDark] = useState(false); // Little hacky..\n\n  const selectAndChangeRandomColor = () => {\n    const mapToArray = Object.entries(themeChangeMap);\n    const randomChoice = Math.floor(Math.random() * mapToArray.length);\n    mapToArray[randomChoice][1]();\n  };\n\n  const toggleDarkMode = () => {\n    isDark ? setDarkTheme() : setLightTheme();\n    setIsDark(!isDark);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StartMenuContainer, {\n    themeState: themeState,\n    children: [/*#__PURE__*/_jsxDEV(StartMenuButton, {\n      onClick: selectAndChangeRandomColor,\n      themeState: themeState,\n      children: \"feeling colorful?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StartMenuButton, {\n      onClick: toggleDarkMode,\n      themeState: themeState,\n      children: \"toggle dark mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StartMenu, \"q7ZpLT56mpT8KrMtkYrDqNxF+7U=\");\n\n_c = StartMenu;\nexport default StartMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartMenu\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/BottomBar/StartMenu.tsx"],"names":["useContext","useState","StartMenuButton","StartMenuContainer","ThemeContext","StartMenu","themeState","canRightClick","setCanRightClick","themeChangeMap","setLightTheme","setDarkTheme","isDark","setIsDark","selectAndChangeRandomColor","mapToArray","Object","entries","randomChoice","Math","floor","random","length","toggleDarkMode"],"mappings":";;;AAAA,SAA4BA,UAA5B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,iBAApD;AAGA,OAAOC,YAAP,MAAyB,kCAAzB;;;AAEA,MAAMC,SAA6C,GAAG,QAAqD;AAAA;;AAAA,MAApD;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,aAAd;AAA6BC,IAAAA;AAA7B,GAAoD;AACzG,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,aAAlB;AAAiCC,IAAAA;AAAjC,MAAkDX,UAAU,CAACI,YAAD,CAAlE;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAU,KAAV,CAApC,CAFyG,CAIzG;;AACA,QAAMa,0BAA0B,GAAG,MAAM;AACvC,UAAMC,UAAgC,GAAGC,MAAM,CAACC,OAAP,CAAeR,cAAf,CAAzC;AACA,UAAMS,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,UAAU,CAACO,MAAtC,CAArB;AACAP,IAAAA,UAAU,CAACG,YAAD,CAAV,CAAyB,CAAzB;AACD,GAJD;;AAMA,QAAMK,cAAc,GAAG,MAAM;AAC3BX,IAAAA,MAAM,GAAGD,YAAY,EAAf,GAAoBD,aAAa,EAAvC;AACAG,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACD,GAHD;;AAKA,sBACE,QAAC,kBAAD;AAAoB,IAAA,UAAU,EAAEN,UAAhC;AAAA,4BACE,QAAC,eAAD;AAAiB,MAAA,OAAO,EAAEQ,0BAA1B;AAAsD,MAAA,UAAU,EAAER,UAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,eAAD;AAAiB,MAAA,OAAO,EAAEiB,cAA1B;AAA0C,MAAA,UAAU,EAAEjB,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA1BD;;GAAMD,S;;KAAAA,S;AA4BN,eAAeA,SAAf","sourcesContent":["import { FunctionComponent, useContext, useState } from \"react\";\nimport { StartMenuButton, StartMenuContainer } from \"./styles/styled\";\nimport { IStartMenuProps } from \"./types/interfaces\";\n\nimport ThemeContext from \"../../context/theme/themeContext\";\n\nconst StartMenu: FunctionComponent<IStartMenuProps> = ({ themeState, canRightClick, setCanRightClick }) => {\n  const { themeChangeMap, setLightTheme, setDarkTheme } = useContext(ThemeContext);\n  const [isDark, setIsDark] = useState<boolean>(false);\n\n  // Little hacky..\n  const selectAndChangeRandomColor = () => {\n    const mapToArray: [string, Function][] = Object.entries(themeChangeMap);\n    const randomChoice = Math.floor(Math.random() * mapToArray.length);\n    mapToArray[randomChoice][1]();\n  };\n\n  const toggleDarkMode = () => {\n    isDark ? setDarkTheme() : setLightTheme();\n    setIsDark(!isDark);\n  };\n\n  return (\n    <StartMenuContainer themeState={themeState}>\n      <StartMenuButton onClick={selectAndChangeRandomColor} themeState={themeState}>\n        feeling colorful?\n      </StartMenuButton>\n      <StartMenuButton onClick={toggleDarkMode} themeState={themeState}>\n        toggle dark mode\n      </StartMenuButton>\n    </StartMenuContainer>\n  );\n};\n\nexport default StartMenu;\n"]},"metadata":{},"sourceType":"module"}