{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/Canvas/CanvasControls.tsx\";\nimport React from \"react\";\nimport { ControlContainer, Button } from \"./styled/styled\";\nimport { uploadDrawing } from \"./services/dbService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CanvasControls = _ref => {\n  let {\n    canvasRef,\n    setCanDraw,\n    setPopupMessage,\n    setShowPopup\n  } = _ref;\n\n  const saveDrawingToDB = async () => {\n    const drawingPaths = await canvasRef.current.exportPaths();\n    const drawingString = await JSON.stringify(drawingPaths);\n    const uploadedDrawing = await uploadDrawing(drawingString);\n\n    if (uploadedDrawing.data.data.status === \"success\") {\n      showSavedMessage();\n    }\n  };\n\n  const eraseDrawing = async () => {\n    await canvasRef.current.resetCanvas();\n  };\n\n  const showSavedMessage = () => {\n    setShowPopup(true);\n    setPopupMessage([\"You have saved your current drawing to the server!\", \"Now all people can see your artistic glory!\"]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ControlContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: eraseDrawing,\n      children: \"erase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: saveDrawingToDB,\n      children: \"save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => setCanDraw(false),\n      children: \"close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_c = CanvasControls;\nexport default CanvasControls;\n\nvar _c;\n\n$RefreshReg$(_c, \"CanvasControls\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/Canvas/CanvasControls.tsx"],"names":["React","ControlContainer","Button","uploadDrawing","CanvasControls","canvasRef","setCanDraw","setPopupMessage","setShowPopup","saveDrawingToDB","drawingPaths","current","exportPaths","drawingString","JSON","stringify","uploadedDrawing","data","status","showSavedMessage","eraseDrawing","resetCanvas"],"mappings":";AAAA,OAAOA,KAAP,MAAyC,OAAzC;AACA,SAASC,gBAAT,EAA2BC,MAA3B,QAAyC,iBAAzC;AACA,SAASC,aAAT,QAA8B,sBAA9B;;;AASA,MAAMC,cAAyD,GAAG,QAK5D;AAAA,MAL6D;AACjEC,IAAAA,SADiE;AAEjEC,IAAAA,UAFiE;AAGjEC,IAAAA,eAHiE;AAIjEC,IAAAA;AAJiE,GAK7D;;AACJ,QAAMC,eAAe,GAAG,YAAY;AAClC,UAAMC,YAAY,GAAG,MAAML,SAAS,CAACM,OAAV,CAAkBC,WAAlB,EAA3B;AACA,UAAMC,aAAa,GAAG,MAAMC,IAAI,CAACC,SAAL,CAAeL,YAAf,CAA5B;AACA,UAAMM,eAAe,GAAG,MAAMb,aAAa,CAACU,aAAD,CAA3C;;AAEA,QAAIG,eAAe,CAACC,IAAhB,CAAqBA,IAArB,CAA0BC,MAA1B,KAAqC,SAAzC,EAAoD;AAClDC,MAAAA,gBAAgB;AACjB;AACF,GARD;;AAUA,QAAMC,YAAY,GAAG,YAAY;AAC/B,UAAMf,SAAS,CAACM,OAAV,CAAkBU,WAAlB,EAAN;AACD,GAFD;;AAIA,QAAMF,gBAAgB,GAAG,MAAM;AAC7BX,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAD,IAAAA,eAAe,CAAC,CACd,oDADc,EAEd,6CAFc,CAAD,CAAf;AAID,GAND;;AAQA,sBACE,QAAC,gBAAD;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEa,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEX,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAMH,UAAU,CAAC,KAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAnCD;;KAAMF,c;AAqCN,eAAeA,cAAf","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport { ControlContainer, Button } from \"./styled/styled\";\nimport { uploadDrawing } from \"./services/dbService\";\n\ninterface IPropsCanvasController {\n  canvasRef: React.MutableRefObject<any>;\n  setCanDraw: React.Dispatch<React.SetStateAction<boolean>>;\n  setPopupMessage: React.Dispatch<React.SetStateAction<string[]>>;\n  setShowPopup: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst CanvasControls: FunctionComponent<IPropsCanvasController> = ({\n  canvasRef,\n  setCanDraw,\n  setPopupMessage,\n  setShowPopup,\n}) => {\n  const saveDrawingToDB = async () => {\n    const drawingPaths = await canvasRef.current.exportPaths();\n    const drawingString = await JSON.stringify(drawingPaths);\n    const uploadedDrawing = await uploadDrawing(drawingString);\n\n    if (uploadedDrawing.data.data.status === \"success\") {\n      showSavedMessage();\n    }\n  };\n\n  const eraseDrawing = async () => {\n    await canvasRef.current.resetCanvas();\n  };\n\n  const showSavedMessage = () => {\n    setShowPopup(true);\n    setPopupMessage([\n      \"You have saved your current drawing to the server!\",\n      \"Now all people can see your artistic glory!\",\n    ]);\n  };\n\n  return (\n    <ControlContainer>\n      <Button onClick={eraseDrawing}>erase</Button>\n      <Button onClick={saveDrawingToDB}>save</Button>\n      <Button onClick={() => setCanDraw(false)}>close</Button>\n    </ControlContainer>\n  );\n};\n\nexport default CanvasControls;\n"]},"metadata":{},"sourceType":"module"}