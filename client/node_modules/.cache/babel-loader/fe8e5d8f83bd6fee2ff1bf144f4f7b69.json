{"ast":null,"code":"import _classCallCheck from \"/Users/r/Desktop/portfolio-final/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/r/Desktop/portfolio-final/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _objectSpread from \"/Users/r/Desktop/portfolio-final/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/r/Desktop/portfolio-final/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"pixelDensities\"],\n    _excluded2 = [\"widths\"];\n\nvar camelCaseToParamCase = function camelCaseToParamCase(input) {\n  return input.replace(/[A-Z]/g, function (match) {\n    return \"-\".concat(match.toLowerCase());\n  });\n};\n\nvar buildURL = function buildURL(url, params) {\n  var instance = new URL(url);\n\n  for (var camelCasedParamKey in params) {\n    var paramKey = camelCaseToParamCase(camelCasedParamKey);\n    var paramValue = params[camelCasedParamKey];\n\n    if (paramValue === void 0) {\n      instance.searchParams.delete(paramKey);\n    } else if (Array.isArray(paramValue)) {\n      instance.searchParams.set(paramKey, paramValue.join(\",\"));\n    } else {\n      instance.searchParams.set(paramKey, \"\".concat(paramValue));\n    }\n  }\n\n  var s = instance.searchParams.get(\"s\");\n\n  if (s) {\n    instance.searchParams.delete(\"s\");\n    instance.searchParams.append(\"s\", s);\n  }\n\n  return instance.toString();\n};\n\nvar buildPixelDensitySrcSet = function buildPixelDensitySrcSet(url, _ref) {\n  var pixelDensities = _ref.pixelDensities,\n      params = _objectWithoutProperties(_ref, _excluded);\n\n  return pixelDensities.map(function (dpr) {\n    return \"\".concat(buildURL(url, _objectSpread(_objectSpread({}, params), {}, {\n      dpr: dpr\n    })), \" \").concat(dpr, \"x\");\n  }).join(\", \");\n};\n\nvar buildWidthSrcSet = function buildWidthSrcSet(url, _ref2) {\n  var widths = _ref2.widths,\n      params = _objectWithoutProperties(_ref2, _excluded2);\n\n  return widths.map(function (width) {\n    return \"\".concat(buildURL(url, _objectSpread(_objectSpread({}, params), {}, {\n      w: void 0,\n      width: width\n    })), \" \").concat(width, \"w\");\n  }).join(\", \");\n};\n\nvar Client = /*#__PURE__*/function () {\n  function Client(options) {\n    _classCallCheck(this, Client);\n\n    this.baseURL = options.baseURL;\n  }\n\n  _createClass(Client, [{\n    key: \"buildURLForPath\",\n    value: function buildURLForPath(path) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return buildURL(\"\".concat(new URL(path, this.baseURL)), params);\n    }\n  }, {\n    key: \"buildWidthSrcSetForPath\",\n    value: function buildWidthSrcSetForPath(path, params) {\n      return buildWidthSrcSet(\"\".concat(new URL(path, this.baseURL)), params);\n    }\n  }, {\n    key: \"buildPixelDensitySrcSetForPath\",\n    value: function buildPixelDensitySrcSetForPath(path, params) {\n      return buildPixelDensitySrcSet(\"\".concat(new URL(path, this.baseURL)), params);\n    }\n  }]);\n\n  return Client;\n}();\n\nexport { Client, buildPixelDensitySrcSet, buildURL, buildWidthSrcSet };","map":{"version":3,"mappings":";;;;;;;AAgBA,IAAMA,uBAAuB,SAAvBA,oBAAuB,CAACC,KAAD,EAA2B;AACvD,SAAOA,MAAMC,OAAN,CAAc,QAAd,EAAwB,UAACC,KAAD,EAAW;AACzC,sBAAWA,MAAMC,WAAN,EAAX;AAAiB,GADX,CAAP;AACkB,CAFnB;;IAuCaC,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAcC,MAAd,EAAiD;AACxE,MAAMC,WAAW,IAAIC,GAAJ,CAAQH,GAAR,CAAjB;;AAEA,WAAWI,kBAAX,IAAiCH,MAAjC,EAAyC;AACxC,QAAMI,WAAWX,qBAAqBU,kBAArB,CAAjB;AACA,QAAME,aAAaL,OAAOG,kBAAP,CAAnB;;AAEA,QAAIE,eAAe,MAAnB,EAA8B;AAC7BJ,eAASK,YAAT,CAAsBC,MAAtB,CAA6BH,QAA7B;AAA6B,KAD9B,MAC8B,IACnBI,MAAMC,OAAN,CAAcJ,UAAd,CADmB,EACQ;AACrCJ,eAASK,YAAT,CAAsBI,GAAtB,CAA0BN,QAA1B,EAAoCC,WAAWM,IAAX,CAAgB,GAAhB,CAApC;AAAoD,KAFvB,MAGvB;AACNV,eAASK,YAAT,CAAsBI,GAAtB,CAA0BN,QAA1B,YAAuCC,UAAvC;AAAuC;AAAA;;AAMzC,MAAMO,IAAIX,SAASK,YAAT,CAAsBO,GAAtB,CAA0B,GAA1B,CAAV;;AACA,MAAID,CAAJ,EAAO;AACNX,aAASK,YAAT,CAAsBC,MAAtB,CAA6B,GAA7B;AACAN,aAASK,YAAT,CAAsBQ,MAAtB,CAA6B,GAA7B,EAAkCF,CAAlC;AAAkC;;AAGnC,SAAOX,SAASc,QAAT,EAAP;AAAgB;;ICnBJC,0BAA0B,SAA1BA,uBAA0B,CACtCjB,GADsC,QAG1B;AAAA,MADVkB,cACU,QADVA,cACU;AAAA,MADSjB,MACT;;AACZ,SAAOiB,eACLC,GADK,CACD,UAACC,GAAD,EAAS;AACb,qBAAUrB,SAASC,GAAT,kCAAmBC,MAAnB;AAA2BmB;AAA3B,OAAV,cAA+CA,GAA/C;AAA+C,GAF1C,EAILR,IAJK,CAIA,IAJA,CAAP;AAIO;;ICZKS,mBAAmB,SAAnBA,gBAAmB,CAC/BrB,GAD+B,SAGnB;AAAA,MADVsB,MACU,SADVA,MACU;AAAA,MADCrB,MACD;;AACZ,SAAOqB,OACLH,GADK,CACD,UAACI,KAAD,EAAW;AACf,qBAAUxB,SAASC,GAAT,kCAAmBC,MAAnB;AAA2BuB,SAAG,MAA9B;AAAyCD;AAAzC,OAAV,cAA+DA,KAA/D;AAA+D,GAF1D,EAILX,IAJK,CAIA,IAJA,CAAP;AAIO;;;AC7BP,kBAAYa,OAAZ,EAAoC;AAAA;;AACnC,SAAKC,OAAL,GAAeD,QAAQC,OAAvB;AAAuB;;;;WA+BxB,yBAAgBC,IAAhB,EAA2D;AAAA,UAA7B1B,MAA6B,uEAAJ,EAAI;AAC1D,aAAOF,mBAAY,IAAII,GAAJ,CAAQwB,IAAR,EAAc,KAAKD,OAAnB,CAAZ,GAA2CzB,MAA3C,CAAP;AAAkD;;;WA6CnD,iCAAwB0B,IAAxB,EAAsC1B,MAAtC,EAAsE;AACrE,aAAOoB,2BAAoB,IAAIlB,GAAJ,CAAQwB,IAAR,EAAc,KAAKD,OAAnB,CAApB,GAAmDzB,MAAnD,CAAP;AAA0D;;;WA2C3D,wCACC0B,IADD,EAEC1B,MAFD,EAGE;AACD,aAAOgB,kCAA2B,IAAId,GAAJ,CAAQwB,IAAR,EAAc,KAAKD,OAAnB,CAA3B,GAA0DzB,MAA1D,CAAP;AAAiE","names":["camelCaseToParamCase","input","replace","match","toLowerCase","buildURL","url","params","instance","URL","camelCasedParamKey","paramKey","paramValue","searchParams","delete","Array","isArray","set","join","s","get","append","toString","buildPixelDensitySrcSet","pixelDensities","map","dpr","buildWidthSrcSet","widths","width","w","options","baseURL","path"],"sources":["/Users/r/Desktop/portfolio-final/client/node_modules/imgix-url-builder/src/buildURL.ts","/Users/r/Desktop/portfolio-final/client/node_modules/imgix-url-builder/src/buildPixelDensitySrcSet.ts","/Users/r/Desktop/portfolio-final/client/node_modules/imgix-url-builder/src/buildWidthSrcSet.ts","/Users/r/Desktop/portfolio-final/client/node_modules/imgix-url-builder/src/Client.ts"],"sourcesContent":["import type { ImgixURLParams } from \"./types.generated\";\n\n/**\n * Converts a camel case string to a param case string.\n *\n * @example\n *\n * ```ts\n * camelCaseToParamCase(\"fooBar\");\n * // => 'foo-bar'\n * ```\n *\n * @param input - Camel case string to convert.\n *\n * @returns Param case version of `input`.\n */\nconst camelCaseToParamCase = (input: string): string => {\n\treturn input.replace(/[A-Z]/g, (match) => {\n\t\treturn `-${match.toLowerCase()}`;\n\t});\n};\n\n/**\n * Builds a URL to an Imgix image with Imgix URL API parameters.\n *\n * The given URL must be a full absolute URL containing the protocol and domain.\n *\n * URL parameters already applied to the image will be retained. To remove\n * existing parameters, set the parameter to `undefined` in the `params` argument.\n *\n * @example\n *\n * ```ts\n * const url = buildURL(\"https://example.imgix.net/image.png\", {\n * \twidth: 400,\n * });\n * // => https://example.imgix.net/image.png?width=400\n * ```\n *\n * @example\n *\n * ```ts\n * const url = buildURL(\"https://example.imgix.net/image.png?width=400\", {\n * \theight: 300,\n * });\n * // => https://example.imgix.net/image.png?width=400&height=300\n * ```\n *\n * @param url - Full absolute URL to the Imgix image.\n * @param params - An object of Imgix URL API parameters.\n *\n * @returns `url` with the given Imgix URL API parameters applied.\n *\n * @see Imgix URL API reference: https://docs.imgix.com/apis/rendering\n */\nexport const buildURL = (url: string, params: ImgixURLParams): string => {\n\tconst instance = new URL(url);\n\n\tfor (const camelCasedParamKey in params) {\n\t\tconst paramKey = camelCaseToParamCase(camelCasedParamKey);\n\t\tconst paramValue = params[camelCasedParamKey as keyof typeof params];\n\n\t\tif (paramValue === undefined) {\n\t\t\tinstance.searchParams.delete(paramKey);\n\t\t} else if (Array.isArray(paramValue)) {\n\t\t\tinstance.searchParams.set(paramKey, paramValue.join(\",\"));\n\t\t} else {\n\t\t\tinstance.searchParams.set(paramKey, `${paramValue}`);\n\t\t}\n\t}\n\n\t// Ensure the `s` parameter is the last parameter, if it exists.\n\t// @see https://github.com/imgix/imgix-blueprint#securing-urls\n\tconst s = instance.searchParams.get(\"s\");\n\tif (s) {\n\t\tinstance.searchParams.delete(\"s\");\n\t\tinstance.searchParams.append(\"s\", s);\n\t}\n\n\treturn instance.toString();\n};\n","import type { ImgixURLParams } from \"./types.generated\";\nimport { buildURL } from \"./buildURL\";\n\n/**\n * Parameters for `buildPixelDensitySrcSet`.\n */\nexport type BuildPixelDensitySrcSetParams = Omit<ImgixURLParams, \"dpr\"> & {\n\t/**\n\t * The pixel densities to include in the resulting `srcset` value.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * [1, 2, 3];\n\t * ```\n\t */\n\tpixelDensities: number[];\n};\n\n/**\n * Builds an `<img>` `srcset` attribute value for a given set of pixel\n * densities. It can also optinally apply Imgix URL API parameters to the URLs.\n *\n * The `dpr` URL parameter will be applied for each `srcset` entry. If a `dpr`\n * parameter is provided to the `params` parameter, it will be ignored.\n *\n * @example\n *\n * ```ts\n * const srcset = buildPixelDensitySrcSet(\n * \t\"https://example.imgix.net/image.png\",\n * \t{ pixelDensities: [1, 2, 3] },\n * );\n * // => https://example.imgix.net/image.png?dpr=1 1x,\n * //    https://example.imgix.net/image.png?dpr=2 2x,\n * //    https://example.imgix.net/image.png?dpr=3 3x\n * ```\n *\n * @example\n *\n * ```ts\n * const srcset = buildPixelDensitySrcSet(\n * \t\"https://example.imgix.net/image.png\",\n * \t{\n * \t\tpixelDensities: [1, 2, 3],\n * \t\tsat: -100,\n * \t},\n * );\n * // => https://example.imgix.net/image.png?dpr=1&sat=-100 1x,\n * //    https://example.imgix.net/image.png?dpr=2&sat=-100 2x,\n * //    https://example.imgix.net/image.png?dpr=3&sat=-100 3x\n * ```\n *\n * @param url - Full absolute URL to the Imgix image.\n * @param params - An object of Imgix URL API parameters. The `pixelDensities`\n *   parameter defines the resulting `srcset` widths.\n *\n * @returns A `srcset` attribute value for `url` with the given Imgix URL API\n *   parameters applied.\n */\nexport const buildPixelDensitySrcSet = (\n\turl: string,\n\t{ pixelDensities, ...params }: BuildPixelDensitySrcSetParams,\n): string => {\n\treturn pixelDensities\n\t\t.map((dpr) => {\n\t\t\treturn `${buildURL(url, { ...params, dpr })} ${dpr}x`;\n\t\t})\n\t\t.join(\", \");\n};\n","import type { ImgixURLParams } from \"./types.generated\";\nimport { buildURL } from \"./buildURL\";\n\n/**\n * Parameters for `buildWidthSrcSet`.\n */\nexport type BuildWidthSrcSetParams = Omit<ImgixURLParams, \"width\" | \"w\"> & {\n\t/**\n\t * The pixel widths to include in the resulting `srcset` value.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * [400, 800, 1600];\n\t * ```\n\t */\n\twidths: number[];\n};\n\n/**\n * Builds an `<img>` `srcset` attribute value for a given set of widths. It can\n * also optinally apply Imgix URL API parameters to the URLs.\n *\n * The `width` URL parameter will be applied for each `srcset` entry. If a\n * `width` or `w` parameter is provided to the `params` parameter, it will be ignored.\n *\n * @example\n *\n * ```ts\n * const srcset = buildWidthSrcSet(\"https://example.imgix.net/image.png\", {\n * \twidths: [400, 800, 1600],\n * });\n * // => https://example.imgix.net/image.png?width=400 400w,\n * //    https://example.imgix.net/image.png?width=800 800w,\n * //    https://example.imgix.net/image.png?width=1600 1600w\n * ```\n *\n * @example\n *\n * ```ts\n * const srcset = buildWidthSrcSet(\"https://example.imgix.net/image.png\", {\n * \twidths: [400, 800, 1600],\n * \tsat: -100,\n * });\n * // => https://example.imgix.net/image.png?width=400&sat=-100 400w,\n * //    https://example.imgix.net/image.png?width=800&sat=-100 800w,\n * //    https://example.imgix.net/image.png?width=1600&sat=-100 1600w\n * ```\n *\n * @param url - Full absolute URL to the Imgix image.\n * @param params - An object of Imgix URL API parameters. The `widths` parameter\n *   defines the resulting `srcset` widths.\n *\n * @returns A `srcset` attribute value for `url` with the given Imgix URL API\n *   parameters applied.\n */\nexport const buildWidthSrcSet = (\n\turl: string,\n\t{ widths, ...params }: BuildWidthSrcSetParams,\n): string => {\n\treturn widths\n\t\t.map((width) => {\n\t\t\treturn `${buildURL(url, { ...params, w: undefined, width })} ${width}w`;\n\t\t})\n\t\t.join(\", \");\n};\n","import type { BuildPixelDensitySrcSetParams } from \"./buildPixelDensitySrcSet\";\nimport type { BuildWidthSrcSetParams } from \"./buildWidthSrcSet\";\nimport type { ImgixURLParams } from \"./types.generated\";\nimport { buildPixelDensitySrcSet } from \"./buildPixelDensitySrcSet\";\nimport { buildURL } from \"./buildURL\";\nimport { buildWidthSrcSet } from \"./buildWidthSrcSet\";\n\n/**\n * Options to instantiate a new client.\n */\nexport type ClientOptions = {\n\t/**\n\t * The base URL used to construct image URLs from a path. The base URL must\n\t * include the protocol, domain, and optionally a path.\n\t *\n\t * @example `https://example.imgix.net`\n\t *\n\t * @example `https://example.imgix.net/folder`\n\t */\n\tbaseURL: string;\n};\n\n/**\n * An Imgix Rendering API client. A client is paired to a single Imgix domain.\n */\nexport class Client {\n\tbaseURL: string;\n\n\t/**\n\t * Creates a new `Client` instance for an Imgix domain.\n\t *\n\t * @param options - Options to instantiate a new client.\n\t *\n\t * @returns A `Client` instance for the given Imgix domain.\n\t */\n\tconstructor(options: ClientOptions) {\n\t\tthis.baseURL = options.baseURL;\n\t}\n\n\t/**\n\t * Builds a URL to an Imgix image with Imgix URL API parameters for the\n\t * client's base URL.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const client = new Client({ baseURL: \"https://example.imgix.net\" });\n\t * const url = client.buildURLForPath(\"/image.png\", { width: 400 });\n\t * // => https://example.imgix.net/image.png?width=400\n\t * ```\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const client = new Client({\n\t * \tbaseURL: \"https://example.imgix.net/folder\",\n\t * });\n\t * const url = client.buildURLForPath(\"./image.png\", { width: 400 });\n\t * // => https://example.imgix.net/folder/image.png?width=400\n\t * ```\n\t *\n\t * @param path - Path to the image relative to the client's base URL.\n\t * @param params - An object of Imgix URL API parameters.\n\t *\n\t * @returns The full absolute URL to the image with the given Imgix URL API\n\t *   parameters applied.\n\t */\n\tbuildURLForPath(path: string, params: ImgixURLParams = {}) {\n\t\treturn buildURL(`${new URL(path, this.baseURL)}`, params);\n\t}\n\n\t/**\n\t * Builds an `<img>` `srcset` attribute value for a given set of widths for\n\t * the client's base URL. It can also optinally apply Imgix URL API parameters\n\t * to the URLs.\n\t *\n\t * The `width` URL parameter will be applied for each `srcset` entry. If a\n\t * `width` or `w` parameter is provided to the `params` parameter, it will be ignored.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const client = new Client({ baseURL: \"https://example.imgix.net\" });\n\t * const srcset = client.buildWidthSrcSetForPath(\"/image.png\", {\n\t * \twidths: [400, 800, 1600],\n\t * });\n\t * // => https://example.imgix.net/image.png?width=400 400w,\n\t * //    https://example.imgix.net/image.png?width=800 800w,\n\t * //    https://example.imgix.net/image.png?width=1600 1600w\n\t * ```\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const client = new Client({\n\t * \tbaseURL: \"https://example.imgix.net\",\n\t * });\n\t * const srcset = client.buildWidthSrcSetForPath(\"/image.png\", {\n\t * \twidths: [400, 800, 1600],\n\t * \tsat: -100,\n\t * });\n\t * // => https://example.imgix.net/image.png?width=400&sat=-100 400w,\n\t * //    https://example.imgix.net/image.png?width=800&sat=-100 800w,\n\t * //    https://example.imgix.net/image.png?width=1600&sat=-100 1600w\n\t * ```\n\t *\n\t * @param path - Path to the image relative to the client's base URL.\n\t * @param params - An object of Imgix URL API parameters. The `widths`\n\t *   parameter defines the resulting `srcset` widths.\n\t *\n\t * @returns A `srcset` attribute value for `url` with the given Imgix URL API\n\t *   parameters applied.\n\t */\n\tbuildWidthSrcSetForPath(path: string, params: BuildWidthSrcSetParams) {\n\t\treturn buildWidthSrcSet(`${new URL(path, this.baseURL)}`, params);\n\t}\n\n\t/**\n\t * Builds an `<img>` `srcset` attribute value for a given set of pixel\n\t * densities for the client's base URL. It can also optinally apply Imgix URL\n\t * API parameters to the URLs.\n\t *\n\t * The `dpr` URL parameter will be applied for each `srcset` entry. If a `dpr`\n\t * parameter is provided to the `params` parameter, it will be ignored.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const client = new Client({ baseURL: \"https://example.imgix.net\" });\n\t * const srcset = client.buildPixelDensitySrcSetForPath(\"/image.png\", {\n\t * \tpixelDensities: [1, 2, 3],\n\t * });\n\t * // => https://example.imgix.net/image.png?dpr=1 1x,\n\t * //    https://example.imgix.net/image.png?dpr=2 2x,\n\t * //    https://example.imgix.net/image.png?dpr=3 3x\n\t * ```\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const client = new Client({ baseURL: \"https://example.imgix.net\" });\n\t * const srcset = client.buildPixelDensitySrcSetForPath(\"/image.png\", {\n\t * \tpixelDensities: [1, 2, 3],\n\t * \tsat: -100,\n\t * });\n\t * // => https://example.imgix.net/image.png?dpr=1&sat=-100 1x,\n\t * //    https://example.imgix.net/image.png?dpr=2&sat=-100 2x,\n\t * //    https://example.imgix.net/image.png?dpr=3&sat=-100 3x\n\t * ```\n\t *\n\t * @param path - Path to the image relative to the client's base URL.\n\t * @param params - An object of Imgix URL API parameters. The `pixelDensities`\n\t *   parameter defines the resulting `srcset` widths.\n\t *\n\t * @returns A `srcset` attribute value for `url` with the given Imgix URL API\n\t *   parameters applied.\n\t */\n\tbuildPixelDensitySrcSetForPath(\n\t\tpath: string,\n\t\tparams: BuildPixelDensitySrcSetParams,\n\t) {\n\t\treturn buildPixelDensitySrcSet(`${new URL(path, this.baseURL)}`, params);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}