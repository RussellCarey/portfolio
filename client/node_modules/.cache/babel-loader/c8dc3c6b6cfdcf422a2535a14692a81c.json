{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/Flip/Square.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport colorArray from \"./colors\";\nimport colorsArray from \"./colors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardContainer = styled.div`\n  background-color: ${props => props.bgcolor};\n  position: relative;\n  width: 100px;\n  height: 100px;\n  transition: all 0.2s;\n  perspective: 1000px;\n`;\n_c = CardContainer;\nconst InnterContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  transition: transform 0.8s;\n  transform-style: preserve-3d;\n\n  transform: ${props => props.flip ? \"rotateX(180deg)\" : \"rotateX(359deg)\"};\n`;\n_c2 = InnterContainer;\nconst FrontSide = styled.div`\n  background-color: ${props => props.secondColor};\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  -webkit-backface-visibility: hidden; /* Safari */\n  backface-visibility: hidden;\n`;\n_c3 = FrontSide;\nconst BackSide = styled.div`\n  background-color: ${props => props.color};\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  -webkit-backface-visibility: hidden; /* Safari */\n  backface-visibility: hidden;\n  transform: rotateX(180deg);\n`;\n_c4 = BackSide;\nexport default function Square() {\n  _s();\n\n  const [flipTime, setFlipTime] = useState(false);\n  const [isFront, setIsFront] = useState(true);\n  const [bgColor, setBgColor] = useState(\"transparent\");\n  const [currentColor, setCurrentColor] = useState(\"\");\n  const [secondColor, setSecondColor] = useState(\"transparent\");\n  useEffect(() => {\n    const randomTime = Math.floor(Math.random() * 50000) + 5000;\n    setInterval(() => {\n      const randomNumber = Math.floor(Math.random() * colorsArray.length);\n      const currCol = isFront ? secondColor : currentColor;\n      isFront ? setBgColor(currCol) : setBgColor(currCol);\n      isFront ? setSecondColor(currCol) : setCurrentColor(currCol);\n      setTimeout(() => {\n        !isFront ? setSecondColor(colorArray[randomNumber]) : setCurrentColor(colorArray[randomNumber]);\n        setFlipTime(!flipTime);\n        setIsFront(!isFront);\n      }, 500);\n    }, randomTime);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    bgcolor: bgColor,\n    children: /*#__PURE__*/_jsxDEV(InnterContainer, {\n      flip: flipTime,\n      children: [/*#__PURE__*/_jsxDEV(FrontSide, {\n        secondColor: secondColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BackSide, {\n        color: currentColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Square, \"c2Trl9iX7GkZ/GqjP2UFrTSL4NQ=\");\n\n_c5 = Square;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"CardContainer\");\n$RefreshReg$(_c2, \"InnterContainer\");\n$RefreshReg$(_c3, \"FrontSide\");\n$RefreshReg$(_c4, \"BackSide\");\n$RefreshReg$(_c5, \"Square\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/Flip/Square.tsx"],"names":["React","useState","useEffect","styled","colorArray","colorsArray","CardContainer","div","props","bgcolor","InnterContainer","flip","FrontSide","secondColor","BackSide","color","Square","flipTime","setFlipTime","isFront","setIsFront","bgColor","setBgColor","currentColor","setCurrentColor","setSecondColor","randomTime","Math","floor","random","setInterval","randomNumber","length","currCol","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { string } from \"zod\";\nimport colorArray from \"./colors\";\nimport colorsArray from \"./colors\";\n\ntype flipProp = { flip: boolean };\ntype colorProp = { color: string };\ntype secondColorolorProp = { secondColor: string };\ntype bgColor = { bgcolor: string };\n\nconst CardContainer = styled.div`\n  background-color: ${(props: bgColor) => props.bgcolor};\n  position: relative;\n  width: 100px;\n  height: 100px;\n  transition: all 0.2s;\n  perspective: 1000px;\n`;\n\nconst InnterContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  transition: transform 0.8s;\n  transform-style: preserve-3d;\n\n  transform: ${(props: flipProp) => (props.flip ? \"rotateX(180deg)\" : \"rotateX(359deg)\")};\n`;\n\nconst FrontSide = styled.div`\n  background-color: ${(props: secondColorolorProp) => props.secondColor};\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  -webkit-backface-visibility: hidden; /* Safari */\n  backface-visibility: hidden;\n`;\n\nconst BackSide = styled.div`\n  background-color: ${(props: colorProp) => props.color};\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  -webkit-backface-visibility: hidden; /* Safari */\n  backface-visibility: hidden;\n  transform: rotateX(180deg);\n`;\n\nexport default function Square() {\n  const [flipTime, setFlipTime] = useState(false);\n  const [isFront, setIsFront] = useState(true);\n  const [bgColor, setBgColor] = useState(\"transparent\");\n  const [currentColor, setCurrentColor] = useState<string>(\"\");\n  const [secondColor, setSecondColor] = useState<string>(\"transparent\");\n\n  useEffect(() => {\n    const randomTime = Math.floor(Math.random() * 50000) + 5000;\n    setInterval(() => {\n      const randomNumber = Math.floor(Math.random() * colorsArray.length);\n      const currCol = isFront ? secondColor : currentColor;\n\n      isFront ? setBgColor(currCol) : setBgColor(currCol);\n      isFront ? setSecondColor(currCol) : setCurrentColor(currCol);\n\n      setTimeout(() => {\n        !isFront ? setSecondColor(colorArray[randomNumber]) : setCurrentColor(colorArray[randomNumber]);\n        setFlipTime(!flipTime);\n        setIsFront(!isFront);\n      }, 500);\n    }, randomTime);\n  }, []);\n\n  return (\n    <CardContainer bgcolor={bgColor}>\n      <InnterContainer flip={flipTime}>\n        <FrontSide secondColor={secondColor} />\n        <BackSide color={currentColor} />\n      </InnterContainer>\n    </CardContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}