{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/src/components/Pages/ProjectsFolder.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from \"react\";\nimport { Container } from \"./styles/project.styles\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport { getAllProjects } from \"./services/projectServices\";\nimport { EWindowTypes } from \"../../interfaces/types\";\nimport Icon from \"../Icons/Index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProjectsPage = _ref => {\n  _s();\n\n  let {\n    themeState,\n    data\n  } = _ref;\n  const [selectedIcon, setSelectedIcon] = useState(\"\");\n  const [projects, setProjects] = useState(null);\n  const {\n    theme\n  } = useContext(ThemeContext);\n\n  const getAndSetProjects = async () => {\n    const projects = await getAllProjects();\n    setProjects(projects);\n  };\n\n  useEffect(() => {\n    getAndSetProjects();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: projects && projects.length > 0 ? projects.map(p => {\n      return /*#__PURE__*/_jsxDEV(Icon, {\n        themeState: theme,\n        pageName: p.data.project_name[0].text,\n        windowType: EWindowTypes.noSidebar,\n        aniDelay: 0.3,\n        isWeb: null,\n        selectedIcon: selectedIcon,\n        setSelectedIcon: setSelectedIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }, this);\n    }) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProjectsPage, \"ZfVeoKkYcOo/tP/er5YJT8OFBLI=\");\n\n_c = ProjectsPage;\nexport default ProjectsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectsPage\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/src/components/Pages/ProjectsFolder.tsx"],"names":["useEffect","useState","useContext","Container","ThemeContext","getAllProjects","EWindowTypes","Icon","ProjectsPage","themeState","data","selectedIcon","setSelectedIcon","projects","setProjects","theme","getAndSetProjects","length","map","p","project_name","text","noSidebar"],"mappings":";;;AAAA,SAA4BA,SAA5B,EAAuCC,QAAvC,EAAiDC,UAAjD,QAAmE,OAAnE;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,OAAOC,YAAP,MAAyB,kCAAzB;AAEA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAAqBC,YAArB,QAAyC,wBAAzC;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;;AAEA,MAAMC,YAAmD,GAAG,QAA0B;AAAA;;AAAA,MAAzB;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAyB;AACpF,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAS,EAAT,CAAhD;AAEA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAa,IAAb,CAAxC;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAYb,UAAU,CAACE,YAAD,CAA5B;;AAEA,QAAMY,iBAAiB,GAAG,YAAY;AACpC,UAAMH,QAAQ,GAAG,MAAMR,cAAc,EAArC;AACAS,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GAHD;;AAKAb,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,SAAD;AAAA,cACGH,QAAQ,IAAIA,QAAQ,CAACI,MAAT,GAAkB,CAA9B,GACGJ,QAAQ,CAACK,GAAT,CAAcC,CAAD,IAAO;AAClB,0BACE,QAAC,IAAD;AACE,QAAA,UAAU,EAAEJ,KADd;AAEE,QAAA,QAAQ,EAAEI,CAAC,CAACT,IAAF,CAAOU,YAAP,CAAoB,CAApB,EAAuBC,IAFnC;AAGE,QAAA,UAAU,EAAEf,YAAY,CAACgB,SAH3B;AAIE,QAAA,QAAQ,EAAE,GAJZ;AAKE,QAAA,KAAK,EAAE,IALT;AAME,QAAA,YAAY,EAAEX,YANhB;AAOE,QAAA,eAAe,EAAEC;AAPnB;AAAA;AAAA;AAAA;AAAA,cADF;AAWD,KAZD,CADH,GAcG;AAfN;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAlCD;;GAAMJ,Y;;KAAAA,Y;AAoCN,eAAeA,YAAf","sourcesContent":["import { FunctionComponent, useEffect, useState, useContext } from \"react\";\nimport { Container } from \"./styles/project.styles\";\nimport { IProjectsPageProps } from \"./types/interfaces\";\nimport ThemeContext from \"../../context/theme/themeContext\";\n\nimport { getAllProjects } from \"./services/projectServices\";\nimport { EPageNames, EWindowTypes } from \"../../interfaces/types\";\nimport Icon from \"../Icons/Index\";\n\nconst ProjectsPage: FunctionComponent<IProjectsPageProps> = ({ themeState, data }) => {\n  const [selectedIcon, setSelectedIcon] = useState<string>(\"\");\n\n  const [projects, setProjects] = useState<any | null>(null);\n  const { theme } = useContext(ThemeContext);\n\n  const getAndSetProjects = async () => {\n    const projects = await getAllProjects();\n    setProjects(projects);\n  };\n\n  useEffect(() => {\n    getAndSetProjects();\n  }, []);\n\n  return (\n    <Container>\n      {projects && projects.length > 0\n        ? projects.map((p) => {\n            return (\n              <Icon\n                themeState={theme}\n                pageName={p.data.project_name[0].text}\n                windowType={EWindowTypes.noSidebar}\n                aniDelay={0.3}\n                isWeb={null}\n                selectedIcon={selectedIcon}\n                setSelectedIcon={setSelectedIcon}\n              />\n            );\n          })\n        : null}\n    </Container>\n  );\n};\n\nexport default ProjectsPage;\n"]},"metadata":{},"sourceType":"module"}