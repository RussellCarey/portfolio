{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/Canvas/Index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState, useEffect } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport styled from \"styled-components\";\nimport { ReactSketchCanvas } from \"react-sketch-canvas\";\nimport { getDrawingData } from \"./services/dbService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n`;\n_c = Container;\n\nconst Index = _ref => {\n  _s();\n\n  let {\n    canvasRef\n  } = _ref;\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const [canDraw, setCanDraw] = useState(false); // Get current drawing state from the DB..\n\n  const getInitialDrawing = async () => {\n    const drawingData = await getDrawingData();\n    if (drawingData.data.status === \"success\") setGotInitial(true);\n    const paths = await JSON.parse(drawingData.data.data.rows[0].data);\n    await canvasRef.current.loadPaths(paths);\n  };\n\n  useEffect(() => {\n    getInitialDrawing();\n  }, []);\n\n  const onDraw = async e => {\n    // On clicking the BG show the drawing mode..\n    const time = await canvasRef.current.getSketchingTime();\n    if (!canDraw) setCanDraw(true); // // If the user has been drawing for over 6 seconds then upload their contribution to the db on each stroke ?\n    // if (time > 6000 && gotInitial) {\n    //   const drawingPaths = await canvasRef.current.exportPaths();\n    //   const drawingString = await JSON.stringify(drawingPaths);\n    //   await uploadDrawing(drawingString);\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    onClick: () => setCanDraw(true),\n    children: /*#__PURE__*/_jsxDEV(ReactSketchCanvas, {\n      ref: canvasRef,\n      canvasColor: \"transparent\",\n      width: canDraw ? \"100vw\" : \"0\",\n      height: canDraw ? \"100vh\" : \"0\",\n      strokeWidth: canDraw ? 3 : 0,\n      strokeColor: theme.borderColor,\n      onStroke: e => onDraw(e),\n      withTimestamp: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"YUjFkx5KsH6U7lKDAgO1N5wtBkE=\");\n\n_c2 = Index;\nexport default Index;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Index\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/Canvas/Index.tsx"],"names":["useContext","useState","useEffect","ThemeContext","styled","ReactSketchCanvas","getDrawingData","Container","div","Index","canvasRef","theme","canDraw","setCanDraw","getInitialDrawing","drawingData","data","status","setGotInitial","paths","JSON","parse","rows","current","loadPaths","onDraw","e","time","getSketchingTime","borderColor"],"mappings":";;;AAAA,SAA4BA,UAA5B,EAAwCC,QAAxC,EAAkDC,SAAlD,QAAmE,OAAnE;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAqBC,iBAArB,QAA8C,qBAA9C;AAEA,SAASC,cAAT,QAA8C,sBAA9C;;AAEA,MAAMC,SAAS,GAAGH,MAAM,CAACI,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,CANA;KAAMD,S;;AAYN,MAAME,KAAsC,GAAG,QAAmB;AAAA;;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AAChE,QAAM;AAAEC,IAAAA;AAAF,MAAYX,UAAU,CAACG,YAAD,CAA5B;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC,CAFgE,CAIhE;;AACA,QAAMa,iBAAiB,GAAG,YAAY;AACpC,UAAMC,WAAW,GAAG,MAAMT,cAAc,EAAxC;AACA,QAAIS,WAAW,CAACC,IAAZ,CAAiBC,MAAjB,KAA4B,SAAhC,EAA2CC,aAAa,CAAC,IAAD,CAAb;AAC3C,UAAMC,KAAK,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWN,WAAW,CAACC,IAAZ,CAAiBA,IAAjB,CAAsBM,IAAtB,CAA2B,CAA3B,EAA8BN,IAAzC,CAApB;AACA,UAAMN,SAAS,CAACa,OAAV,CAAkBC,SAAlB,CAA4BL,KAA5B,CAAN;AACD,GALD;;AAOAjB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMW,MAAM,GAAG,MAAOC,CAAP,IAAyB;AACtC;AACA,UAAMC,IAAI,GAAG,MAAMjB,SAAS,CAACa,OAAV,CAAkBK,gBAAlB,EAAnB;AACA,QAAI,CAAChB,OAAL,EAAcC,UAAU,CAAC,IAAD,CAAV,CAHwB,CAKtC;AACA;AACA;AACA;AACA;AACA;AACD,GAXD;;AAaA,sBACE,QAAC,SAAD;AAAW,IAAA,OAAO,EAAE,MAAMA,UAAU,CAAC,IAAD,CAApC;AAAA,2BACE,QAAC,iBAAD;AACE,MAAA,GAAG,EAAEH,SADP;AAEE,MAAA,WAAW,EAAC,aAFd;AAGE,MAAA,KAAK,EAAEE,OAAO,GAAG,OAAH,GAAa,GAH7B;AAIE,MAAA,MAAM,EAAEA,OAAO,GAAG,OAAH,GAAa,GAJ9B;AAKE,MAAA,WAAW,EAAEA,OAAO,GAAG,CAAH,GAAO,CAL7B;AAME,MAAA,WAAW,EAAED,KAAK,CAACkB,WANrB;AAOE,MAAA,QAAQ,EAAGH,CAAD,IAAOD,MAAM,CAACC,CAAD,CAPzB;AAQE,MAAA,aAAa,EAAE;AARjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA3CD;;GAAMjB,K;;MAAAA,K;AA6CN,eAAeA,KAAf","sourcesContent":["import { FunctionComponent, useContext, useState, useEffect } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport styled from \"styled-components\";\nimport { CanvasPath, ReactSketchCanvas } from \"react-sketch-canvas\";\n\nimport { getDrawingData, uploadDrawing } from \"./services/dbService\";\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n`;\n\ninterface ICanvasProps {\n  canvasRef: React.MutableRefObject<any>;\n}\n\nconst Index: FunctionComponent<ICanvasProps> = ({ canvasRef }) => {\n  const { theme } = useContext(ThemeContext);\n  const [canDraw, setCanDraw] = useState(false);\n\n  // Get current drawing state from the DB..\n  const getInitialDrawing = async () => {\n    const drawingData = await getDrawingData();\n    if (drawingData.data.status === \"success\") setGotInitial(true);\n    const paths = await JSON.parse(drawingData.data.data.rows[0].data);\n    await canvasRef.current.loadPaths(paths);\n  };\n\n  useEffect(() => {\n    getInitialDrawing();\n  }, []);\n\n  const onDraw = async (e: CanvasPath) => {\n    // On clicking the BG show the drawing mode..\n    const time = await canvasRef.current.getSketchingTime();\n    if (!canDraw) setCanDraw(true);\n\n    // // If the user has been drawing for over 6 seconds then upload their contribution to the db on each stroke ?\n    // if (time > 6000 && gotInitial) {\n    //   const drawingPaths = await canvasRef.current.exportPaths();\n    //   const drawingString = await JSON.stringify(drawingPaths);\n    //   await uploadDrawing(drawingString);\n    // }\n  };\n\n  return (\n    <Container onClick={() => setCanDraw(true)}>\n      <ReactSketchCanvas\n        ref={canvasRef}\n        canvasColor=\"transparent\"\n        width={canDraw ? \"100vw\" : \"0\"}\n        height={canDraw ? \"100vh\" : \"0\"}\n        strokeWidth={canDraw ? 3 : 0}\n        strokeColor={theme.borderColor}\n        onStroke={(e) => onDraw(e)}\n        withTimestamp={true}\n      />\n    </Container>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}