{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/src/context/theme/themeState.tsx\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport ThemeReducer from \"./themeReducer\";\nimport ThemeContext from \"./themeContext\";\nimport { lightThemeDefault, darkThemeDefault } from \"./colorSchemes\";\nimport { SET_BACKGROUND_COLOR, SET_DARK_THEME, SET_LIGHT_THEME } from \"./types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThemeState = props => {\n  _s();\n\n  const savedTheme = localStorage.getItem(\"theme\") ? JSON.parse(localStorage.getItem(\"theme\")) : null;\n  const defaultState = lightThemeDefault;\n  const [theme, dispatch] = useReducer(ThemeReducer, defaultState);\n\n  const setBackgroundColor = commandObj => {\n    const color = commandObj.args[0];\n    dispatch({\n      type: SET_BACKGROUND_COLOR,\n      payload: color\n    });\n    localStorage.setItem(\"theme\", JSON.stringify({ ...theme,\n      backgroundColor: color\n    }));\n    return [\"Changed background color.\"];\n  };\n\n  const setLightTheme = () => {\n    dispatch({\n      type: SET_LIGHT_THEME,\n      payload: lightThemeDefault\n    });\n    localStorage.setItem(\"theme\", JSON.stringify({ ...theme,\n      ...lightThemeDefault\n    }));\n    return [\"Changed theme to light.\"];\n  };\n\n  const setDarkTheme = () => {\n    dispatch({\n      type: SET_DARK_THEME,\n      payload: darkThemeDefault\n    });\n    localStorage.setItem(\"theme\", JSON.stringify({ ...theme,\n      ...darkThemeDefault\n    }));\n    return [\"Changed theme to dark.\"];\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemeState, \"Hc6P2Un5PkKIP7V9/nTL2tP0MLE=\");\n\n_c = ThemeState;\nexport default ThemeState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeState\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/src/context/theme/themeState.tsx"],"names":["useReducer","ThemeReducer","ThemeContext","lightThemeDefault","darkThemeDefault","SET_BACKGROUND_COLOR","SET_DARK_THEME","SET_LIGHT_THEME","ThemeState","props","savedTheme","localStorage","getItem","JSON","parse","defaultState","theme","dispatch","setBackgroundColor","commandObj","color","args","type","payload","setItem","stringify","backgroundColor","setLightTheme","setDarkTheme","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,gBAApD;AACA,SAASC,oBAAT,EAA+BC,cAA/B,EAA+CC,eAA/C,QAAmF,SAAnF;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAwB;AAAA;;AACzC,QAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,IAAgCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAhC,GAA6E,IAAhG;AACA,QAAMG,YAAY,GAAGZ,iBAArB;AAEA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBjB,UAAU,CAACC,YAAD,EAAec,YAAf,CAApC;;AAEA,QAAMG,kBAAkB,GAAIC,UAAD,IAAgC;AACzD,UAAMC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgB,CAAhB,CAAd;AACAJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEjB,oBAAR;AAA8BkB,MAAAA,OAAO,EAAEH;AAAvC,KAAD,CAAR;AACAT,IAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA8BX,IAAI,CAACY,SAAL,CAAe,EAAE,GAAGT,KAAL;AAAYU,MAAAA,eAAe,EAAEN;AAA7B,KAAf,CAA9B;AACA,WAAO,CAAC,2BAAD,CAAP;AACD,GALD;;AAOA,QAAMO,aAAa,GAAG,MAAM;AAC1BV,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEf,eAAR;AAAyBgB,MAAAA,OAAO,EAAEpB;AAAlC,KAAD,CAAR;AACAQ,IAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA8BX,IAAI,CAACY,SAAL,CAAe,EAAE,GAAGT,KAAL;AAAY,SAAGb;AAAf,KAAf,CAA9B;AACA,WAAO,CAAC,yBAAD,CAAP;AACD,GAJD;;AAMA,QAAMyB,YAAY,GAAG,MAAM;AACzBX,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEhB,cAAR;AAAwBiB,MAAAA,OAAO,EAAEnB;AAAjC,KAAD,CAAR;AACAO,IAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA8BX,IAAI,CAACY,SAAL,CAAe,EAAE,GAAGT,KAAL;AAAY,SAAGZ;AAAf,KAAf,CAA9B;AACA,WAAO,CAAC,wBAAD,CAAP;AACD,GAJD;;AAMA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLY,MAAAA;AADK,KADT;AAAA,cAKGP,KAAK,CAACoB;AALT;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAlCD;;GAAMrB,U;;KAAAA,U;AAoCN,eAAeA,UAAf","sourcesContent":["import { useReducer } from \"react\";\nimport ThemeReducer from \"./themeReducer\";\nimport ThemeContext from \"./themeContext\";\nimport { ICommandObject } from \"./types\";\nimport { lightThemeDefault, darkThemeDefault } from \"./colorSchemes\";\nimport { SET_BACKGROUND_COLOR, SET_DARK_THEME, SET_LIGHT_THEME, IPropsState } from \"./types\";\n\nconst ThemeState = (props: IPropsState) => {\n  const savedTheme = localStorage.getItem(\"theme\") ? JSON.parse(localStorage.getItem(\"theme\")!) : null;\n  const defaultState = lightThemeDefault;\n\n  const [theme, dispatch] = useReducer(ThemeReducer, defaultState);\n\n  const setBackgroundColor = (commandObj: ICommandObject) => {\n    const color = commandObj.args[0];\n    dispatch({ type: SET_BACKGROUND_COLOR, payload: color });\n    localStorage.setItem(\"theme\", JSON.stringify({ ...theme, backgroundColor: color }));\n    return [\"Changed background color.\"];\n  };\n\n  const setLightTheme = () => {\n    dispatch({ type: SET_LIGHT_THEME, payload: lightThemeDefault });\n    localStorage.setItem(\"theme\", JSON.stringify({ ...theme, ...lightThemeDefault }));\n    return [\"Changed theme to light.\"];\n  };\n\n  const setDarkTheme = () => {\n    dispatch({ type: SET_DARK_THEME, payload: darkThemeDefault });\n    localStorage.setItem(\"theme\", JSON.stringify({ ...theme, ...darkThemeDefault }));\n    return [\"Changed theme to dark.\"];\n  };\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        theme,\n      }}\n    >\n      {props.children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeState;\n"]},"metadata":{},"sourceType":"module"}