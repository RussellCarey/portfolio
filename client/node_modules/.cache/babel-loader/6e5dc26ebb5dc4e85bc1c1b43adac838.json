{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/Login/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext, useState, useRef } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport LoginAbout from \"../InnerPages/LoginAbout\";\nimport { PageContainer, UserIconContainer, UserIcon, InputField, FakeInputField, HelpBox, LoginButton, AnimatedLogin } from \"./styles/styled\";\nimport { delayTime } from \"./utils/typing\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = _ref => {\n  _s();\n\n  let {\n    setIsLoggedIn,\n    dimensions\n  } = _ref;\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const [isLoading, setIsLoading] = useState(true);\n  const [clickedLogin, setClickedLogin] = useState(false);\n  const [nameState, setNameState] = useState(\"\");\n  const [passwordState, setPasswordState] = useState(\"\");\n  const nameRef = useRef(\"\");\n  const passwordRef = useRef(\"\");\n\n  const populateFieldTyping = async (ref, setState, text, startDelay) => {\n    await delayTime(startDelay, () => {}); // Set blinking? For the text line?\n    // set type speed to a state (random?)\n\n    const textArray = text.split(\"\");\n\n    for (const letter of textArray) {\n      const typingDelayTime = Math.random() * 200;\n      await delayTime(typingDelayTime, () => {\n        ref.current = ref.current + letter;\n        setState(ref.current);\n      });\n    }\n\n    if (startDelay > 1000) setIsLoading(false);\n  };\n\n  useEffect(() => {\n    populateFieldTyping(nameRef, setNameState, \"Russell Carey\", 1000);\n    populateFieldTyping(passwordRef, setPasswordState, \"**********\", 3000);\n  }, []);\n  return !clickedLogin ? /*#__PURE__*/_jsxDEV(PageContainer, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(UserIconContainer, {\n        themeState: theme,\n        children: /*#__PURE__*/_jsxDEV(UserIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FakeInputField, {\n        themeState: theme,\n        children: /*#__PURE__*/_jsxDEV(InputField, {\n          themeState: theme,\n          type: \"text\",\n          value: nameState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FakeInputField, {\n        themeState: theme,\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          themeState: theme,\n          type: \"text\",\n          value: passwordState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HelpBox, {\n          themeState: theme,\n          children: \"?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(LoginButton, {\n        themeState: theme,\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(AnimatedLogin, {\n        themeState: theme,\n        onClick: () => setClickedLogin(true),\n        children: \"login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(LoginAbout, {\n    setIsLoggedIn: setIsLoggedIn,\n    dimnsions: dimensions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginPage, \"CTsb/T9Y/iBpdlOoMQnjmCwTD8s=\");\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/Login/index.tsx"],"names":["React","useEffect","useContext","useState","useRef","ThemeContext","LoginAbout","PageContainer","UserIconContainer","UserIcon","InputField","FakeInputField","HelpBox","LoginButton","AnimatedLogin","delayTime","LoginPage","setIsLoggedIn","dimensions","theme","isLoading","setIsLoading","clickedLogin","setClickedLogin","nameState","setNameState","passwordState","setPasswordState","nameRef","passwordRef","populateFieldTyping","ref","setState","text","startDelay","textArray","split","letter","typingDelayTime","Math","random","current"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState, FunctionComponent, useRef } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport LoginAbout from \"../InnerPages/LoginAbout\";\nimport {\n  PageContainer,\n  UserIconContainer,\n  UserIcon,\n  InputField,\n  FakeInputField,\n  HelpBox,\n  LoginButton,\n  AnimatedLogin,\n} from \"./styles/styled\";\nimport { delayTime } from \"./utils/typing\";\n\ninterface ILoginPage {\n  setIsLoggedIn: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst LoginPage: FunctionComponent<ILoginPage> = ({ setIsLoggedIn, dimensions }) => {\n  const { theme } = useContext(ThemeContext);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [clickedLogin, setClickedLogin] = useState<boolean>(false);\n  const [nameState, setNameState] = useState<string>(\"\");\n  const [passwordState, setPasswordState] = useState<string>(\"\");\n  const nameRef = useRef<string>(\"\");\n  const passwordRef = useRef<string>(\"\");\n\n  const populateFieldTyping = async (\n    ref: React.MutableRefObject<string>,\n    setState: React.Dispatch<React.SetStateAction<string>>,\n    text: string,\n    startDelay: number\n  ) => {\n    await delayTime(startDelay, () => {});\n    // Set blinking? For the text line?\n\n    // set type speed to a state (random?)\n\n    const textArray = text.split(\"\");\n\n    for (const letter of textArray) {\n      const typingDelayTime = Math.random() * 200;\n\n      await delayTime(typingDelayTime, () => {\n        ref.current = ref.current + letter;\n        setState(ref.current);\n      });\n    }\n\n    if (startDelay > 1000) setIsLoading(false);\n  };\n\n  useEffect(() => {\n    populateFieldTyping(nameRef, setNameState, \"Russell Carey\", 1000);\n    populateFieldTyping(passwordRef, setPasswordState, \"**********\", 3000);\n  }, []);\n\n  return !clickedLogin ? (\n    <PageContainer>\n      <>\n        <UserIconContainer themeState={theme}>\n          <UserIcon />\n        </UserIconContainer>\n        <FakeInputField themeState={theme}>\n          <InputField themeState={theme} type=\"text\" value={nameState} />\n        </FakeInputField>\n        <FakeInputField themeState={theme}>\n          <InputField themeState={theme} type=\"text\" value={passwordState} />\n          <HelpBox themeState={theme}>?</HelpBox>\n        </FakeInputField>\n        {isLoading ? (\n          <LoginButton themeState={theme}>loading</LoginButton>\n        ) : (\n          <AnimatedLogin themeState={theme} onClick={() => setClickedLogin(true)}>\n            login\n          </AnimatedLogin>\n        )}\n      </>\n    </PageContainer>\n  ) : (\n    <LoginAbout setIsLoggedIn={setIsLoggedIn} dimnsions={dimensions} />\n  );\n};\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}