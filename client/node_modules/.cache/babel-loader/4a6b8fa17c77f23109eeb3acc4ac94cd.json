{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/Login/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext, useState, useRef } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport LoginAbout from \"../InnerPages/LoginAbout\";\nimport { delayTime } from \"./utils/typing\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = _ref => {\n  _s();\n\n  let {\n    setIsLoggedIn\n  } = _ref;\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const [isLoading, setIsLoading] = useState(true);\n  const [nameState, setNameState] = useState(\"\");\n  const [passwordState, setPasswordState] = useState(\"\");\n  const nameRef = useRef(\"\");\n  const passwordRef = useRef(\"\");\n\n  const populateFieldTyping = async (ref, setState, text, startDelay) => {\n    await delayTime(startDelay, () => {}); // Set blinking? For the text line?\n    // set type speed to a state (random?)\n\n    const textArray = text.split(\"\");\n\n    for (const letter of textArray) {\n      const typingDelayTime = Math.random() * 200;\n      await delayTime(typingDelayTime, () => {\n        ref.current = ref.current + letter;\n        setState(ref.current);\n      });\n    }\n\n    if (startDelay > 1) setIsLoading(false);\n  };\n\n  useEffect(() => {\n    populateFieldTyping(nameRef, setNameState, \"Russell Carey\", 0);\n    populateFieldTyping(passwordRef, setPasswordState, \"**********\", 2000);\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <PageContainer>\n    //   <>\n    //     <UserIconContainer themeState={theme}>\n    //       <UserIcon />\n    //     </UserIconContainer>\n    //     <FakeInputField themeState={theme}>\n    //       <InputField themeState={theme} type=\"text\" value={nameState} />\n    //     </FakeInputField>\n    //     <FakeInputField themeState={theme}>\n    //       <InputField themeState={theme} type=\"text\" value={passwordState} />\n    //       <HelpBox themeState={theme}>?</HelpBox>\n    //     </FakeInputField>\n    //     {isLoading ? (\n    //       <LoginButton themeState={theme}>loading</LoginButton>\n    //     ) : (\n    //       <AnimatedLogin themeState={theme} onClick={() => setIsLoggedIn(true)}>\n    //         login\n    //       </AnimatedLogin>\n    //     )}\n    //   </>\n    // </PageContainer>\n    _jsxDEV(LoginAbout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(LoginPage, \"052WsWmQ7qA9CMdsxaUsaxYgUis=\");\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/Login/index.tsx"],"names":["React","useEffect","useContext","useState","useRef","ThemeContext","LoginAbout","delayTime","LoginPage","setIsLoggedIn","theme","isLoading","setIsLoading","nameState","setNameState","passwordState","setPasswordState","nameRef","passwordRef","populateFieldTyping","ref","setState","text","startDelay","textArray","split","letter","typingDelayTime","Math","random","current"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,QAAvC,EAAoEC,MAApE,QAAkF,OAAlF;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAWA,SAASC,SAAT,QAA0B,gBAA1B;;;AAMA,MAAMC,SAAwC,GAAG,QAAuB;AAAA;;AAAA,MAAtB;AAAEC,IAAAA;AAAF,GAAsB;AACtE,QAAM;AAAEC,IAAAA;AAAF,MAAYR,UAAU,CAACG,YAAD,CAA5B;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAU,IAAV,CAA1C;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAS,EAAT,CAA1C;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAS,EAAT,CAAlD;AACA,QAAMc,OAAO,GAAGb,MAAM,CAAS,EAAT,CAAtB;AACA,QAAMc,WAAW,GAAGd,MAAM,CAAS,EAAT,CAA1B;;AAEA,QAAMe,mBAAmB,GAAG,OAC1BC,GAD0B,EAE1BC,QAF0B,EAG1BC,IAH0B,EAI1BC,UAJ0B,KAKvB;AACH,UAAMhB,SAAS,CAACgB,UAAD,EAAa,MAAM,CAAE,CAArB,CAAf,CADG,CAEH;AAEA;;AAEA,UAAMC,SAAS,GAAGF,IAAI,CAACG,KAAL,CAAW,EAAX,CAAlB;;AAEA,SAAK,MAAMC,MAAX,IAAqBF,SAArB,EAAgC;AAC9B,YAAMG,eAAe,GAAGC,IAAI,CAACC,MAAL,KAAgB,GAAxC;AAEA,YAAMtB,SAAS,CAACoB,eAAD,EAAkB,MAAM;AACrCP,QAAAA,GAAG,CAACU,OAAJ,GAAcV,GAAG,CAACU,OAAJ,GAAcJ,MAA5B;AACAL,QAAAA,QAAQ,CAACD,GAAG,CAACU,OAAL,CAAR;AACD,OAHc,CAAf;AAID;;AAED,QAAIP,UAAU,GAAG,CAAjB,EAAoBX,YAAY,CAAC,KAAD,CAAZ;AACrB,GAvBD;;AAyBAX,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,mBAAmB,CAACF,OAAD,EAAUH,YAAV,EAAwB,eAAxB,EAAyC,CAAzC,CAAnB;AACAK,IAAAA,mBAAmB,CAACD,WAAD,EAAcF,gBAAd,EAAgC,YAAhC,EAA8C,IAA9C,CAAnB;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAtBF;AAwBD,CA9DD;;GAAMR,S;;KAAAA,S;AAgEN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useContext, useState, FunctionComponent, useRef } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport LoginAbout from \"../InnerPages/LoginAbout\";\nimport {\n  PageContainer,\n  UserIconContainer,\n  UserIcon,\n  InputField,\n  FakeInputField,\n  HelpBox,\n  LoginButton,\n  AnimatedLogin,\n} from \"./styles/styled\";\nimport { delayTime } from \"./utils/typing\";\n\ninterface ILoginPage {\n  setIsLoggedIn: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst LoginPage: FunctionComponent<ILoginPage> = ({ setIsLoggedIn }) => {\n  const { theme } = useContext(ThemeContext);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [nameState, setNameState] = useState<string>(\"\");\n  const [passwordState, setPasswordState] = useState<string>(\"\");\n  const nameRef = useRef<string>(\"\");\n  const passwordRef = useRef<string>(\"\");\n\n  const populateFieldTyping = async (\n    ref: React.MutableRefObject<string>,\n    setState: React.Dispatch<React.SetStateAction<string>>,\n    text: string,\n    startDelay: number\n  ) => {\n    await delayTime(startDelay, () => {});\n    // Set blinking? For the text line?\n\n    // set type speed to a state (random?)\n\n    const textArray = text.split(\"\");\n\n    for (const letter of textArray) {\n      const typingDelayTime = Math.random() * 200;\n\n      await delayTime(typingDelayTime, () => {\n        ref.current = ref.current + letter;\n        setState(ref.current);\n      });\n    }\n\n    if (startDelay > 1) setIsLoading(false);\n  };\n\n  useEffect(() => {\n    populateFieldTyping(nameRef, setNameState, \"Russell Carey\", 0);\n    populateFieldTyping(passwordRef, setPasswordState, \"**********\", 2000);\n  }, []);\n\n  return (\n    // <PageContainer>\n    //   <>\n    //     <UserIconContainer themeState={theme}>\n    //       <UserIcon />\n    //     </UserIconContainer>\n    //     <FakeInputField themeState={theme}>\n    //       <InputField themeState={theme} type=\"text\" value={nameState} />\n    //     </FakeInputField>\n    //     <FakeInputField themeState={theme}>\n    //       <InputField themeState={theme} type=\"text\" value={passwordState} />\n    //       <HelpBox themeState={theme}>?</HelpBox>\n    //     </FakeInputField>\n    //     {isLoading ? (\n    //       <LoginButton themeState={theme}>loading</LoginButton>\n    //     ) : (\n    //       <AnimatedLogin themeState={theme} onClick={() => setIsLoggedIn(true)}>\n    //         login\n    //       </AnimatedLogin>\n    //     )}\n    //   </>\n    // </PageContainer>\n    <LoginAbout />\n  );\n};\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}