{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/src/context/window/windowState.tsx\",\n    _s = $RefreshSig$();\n\nimport { SET_ACTIVE_WINDOW, CREATE_NEW_WINDOW, DESTROY_ACTIVE_WINDOW } from \"./types\";\nimport React, { useReducer } from \"react\";\nimport WindowReducer from \"./windowReducer\";\nimport WindowContext from \"./windowContext\";\nimport Window from \"../../components/Window/Index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WindowState = props => {\n  _s();\n\n  const initialState = {\n    currentWindowID: null,\n    windows: []\n  };\n  const [windowState, dispatch] = useReducer(WindowReducer, initialState); // Create and populate a new window.\n\n  const createNewWindow = (pageName, id, windowType, data, isProject) => {\n    const newWindow = /*#__PURE__*/_jsxDEV(Window, {\n      themeState: \"\",\n      pageName: pageName,\n      data: data,\n      id: id,\n      windowType: windowType,\n      isProject: isProject,\n      windowList: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n\n    dispatch({\n      type: CREATE_NEW_WINDOW,\n      payload: newWindow\n    });\n  }; // Set Active Window\n\n\n  const setActiveWindow = id => {\n    dispatch({\n      type: SET_ACTIVE_WINDOW,\n      payload: id\n    });\n  }; // Delete window from the view\n\n\n  const deleteActiveWindow = id => {\n    const filteredList = windowState.windows.filter(window => window.id !== id);\n    dispatch({\n      type: DESTROY_ACTIVE_WINDOW,\n      payload: filteredList\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(WindowContext.Provider, {\n    value: {\n      windowState,\n      createNewWindow,\n      setActiveWindow,\n      deleteActiveWindow\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WindowState, \"ccqQKVfrL21A7LO+STgm52b4DeA=\");\n\n_c = WindowState;\nexport default WindowState;\n\nvar _c;\n\n$RefreshReg$(_c, \"WindowState\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/src/context/window/windowState.tsx"],"names":["SET_ACTIVE_WINDOW","CREATE_NEW_WINDOW","DESTROY_ACTIVE_WINDOW","React","useReducer","WindowReducer","WindowContext","Window","WindowState","props","initialState","currentWindowID","windows","windowState","dispatch","createNewWindow","pageName","id","windowType","data","isProject","newWindow","type","payload","setActiveWindow","deleteActiveWindow","filteredList","filter","window","children"],"mappings":";;;AAAA,SAASA,iBAAT,EAA4BC,iBAA5B,EAA+CC,qBAA/C,QAAoG,SAApG;AAEA,OAAOC,KAAP,IAAgBC,UAAhB,QAA8C,OAA9C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,+BAAnB;;;AAWA,MAAMC,WAAW,GAAIC,KAAD,IAAgB;AAAA;;AAClC,QAAMC,YAAY,GAAG;AACnBC,IAAAA,eAAe,EAAE,IADE;AAEnBC,IAAAA,OAAO,EAAE;AAFU,GAArB;AAKA,QAAM,CAACC,WAAD,EAAcC,QAAd,IAA0BV,UAAU,CAACC,aAAD,EAAgBK,YAAhB,CAA1C,CANkC,CAQlC;;AACA,QAAMK,eAAe,GAAG,CAACC,QAAD,EAAmBC,EAAnB,EAA+BC,UAA/B,EAAmDC,IAAnD,EAA8DC,SAA9D,KAAqF;AAC3G,UAAMC,SAAS,gBACb,QAAC,MAAD;AACE,MAAA,UAAU,EAAE,EADd;AAEE,MAAA,QAAQ,EAAEL,QAFZ;AAGE,MAAA,IAAI,EAAEG,IAHR;AAIE,MAAA,EAAE,EAAEF,EAJN;AAKE,MAAA,UAAU,EAAEC,UALd;AAME,MAAA,SAAS,EAAEE,SANb;AAOE,MAAA,UAAU,EAAE;AAPd;AAAA;AAAA;AAAA;AAAA,YADF;;AAWAN,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAErB,iBAAR;AAA2BsB,MAAAA,OAAO,EAAEF;AAApC,KAAD,CAAR;AACD,GAbD,CATkC,CAwBlC;;;AACA,QAAMG,eAAe,GAAIP,EAAD,IAAgB;AACtCH,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAEtB,iBAAR;AAA2BuB,MAAAA,OAAO,EAAEN;AAApC,KAAD,CAAR;AACD,GAFD,CAzBkC,CA6BlC;;;AACA,QAAMQ,kBAAkB,GAAIR,EAAD,IAAgB;AACzC,UAAMS,YAAY,GAAGb,WAAW,CAACD,OAAZ,CAAoBe,MAApB,CAA4BC,MAAD,IAA2BA,MAAM,CAACX,EAAP,KAAcA,EAApE,CAArB;AACAH,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAEpB,qBAAR;AAA+BqB,MAAAA,OAAO,EAAEG;AAAxC,KAAD,CAAR;AACD,GAHD;;AAKA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLb,MAAAA,WADK;AAELE,MAAAA,eAFK;AAGLS,MAAAA,eAHK;AAILC,MAAAA;AAJK,KADT;AAAA,cAQGhB,KAAK,CAACoB;AART;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA/CD;;GAAMrB,W;;KAAAA,W;AAiDN,eAAeA,WAAf","sourcesContent":["import { SET_ACTIVE_WINDOW, CREATE_NEW_WINDOW, DESTROY_ACTIVE_WINDOW, MINIMIZE_ACTIVE_WINDOW } from \"./types\";\n\nimport React, { useReducer, useContext } from \"react\";\nimport WindowReducer from \"./windowReducer\";\nimport WindowContext from \"./windowContext\";\nimport Window from \"../../components/Window/Index\";\n\ninterface IWindowObject {\n  id: number;\n  label: string;\n  pageName: string;\n  windowType: string;\n  isProject: boolean;\n  windowList: any;\n}\n\nconst WindowState = (props: any) => {\n  const initialState = {\n    currentWindowID: null,\n    windows: [],\n  };\n\n  const [windowState, dispatch] = useReducer(WindowReducer, initialState);\n\n  // Create and populate a new window.\n  const createNewWindow = (pageName: string, id: number, windowType: string, data: any, isProject: boolean) => {\n    const newWindow = (\n      <Window\n        themeState={\"\"}\n        pageName={pageName}\n        data={data}\n        id={id}\n        windowType={windowType}\n        isProject={isProject}\n        windowList={null}\n      ></Window>\n    );\n    dispatch({ type: CREATE_NEW_WINDOW, payload: newWindow });\n  };\n\n  // Set Active Window\n  const setActiveWindow = (id: number) => {\n    dispatch({ type: SET_ACTIVE_WINDOW, payload: id });\n  };\n\n  // Delete window from the view\n  const deleteActiveWindow = (id: number) => {\n    const filteredList = windowState.windows.filter((window: IWindowObject) => window.id !== id);\n    dispatch({ type: DESTROY_ACTIVE_WINDOW, payload: filteredList });\n  };\n\n  return (\n    <WindowContext.Provider\n      value={{\n        windowState,\n        createNewWindow,\n        setActiveWindow,\n        deleteActiveWindow,\n      }}\n    >\n      {props.children}\n    </WindowContext.Provider>\n  );\n};\n\nexport default WindowState;\n"]},"metadata":{},"sourceType":"module"}