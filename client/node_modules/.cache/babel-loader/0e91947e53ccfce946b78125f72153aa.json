{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/Canvas/Index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState, useEffect } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport styled from \"styled-components\";\nimport { ReactSketchCanvas } from \"react-sketch-canvas\";\nimport CanvasControls from \"./CanvasControls\";\nimport { getDrawingData } from \"./services/dbService\";\nimport PopupComp from \"./Popup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n`;\n_c = Container;\n\nconst Index = _ref => {\n  _s();\n\n  let {\n    canvasRef,\n    canDraw,\n    setCanDraw\n  } = _ref;\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const [showPopup, setShowPopup] = useState(false);\n  const [popupMessage, setPopupMessage] = useState([`Activated the drawing mode!`, \" \", `Anyone can add the the canvas and create a community drawing.`, `The erase button will erase the whole drawing, save will upload and overwrite the image and close will close this mode!`, `Have fun.`]); // Get current drawing state from the DB..\n\n  const getInitialDrawing = async () => {\n    const drawingData = await getDrawingData();\n    const paths = await JSON.parse(drawingData.data.data.rows[0].data);\n    await canvasRef.current.loadPaths(paths);\n  };\n\n  useEffect(() => {\n    getInitialDrawing();\n    if (canDraw) setShowPopup(true);\n  }, []);\n\n  const onDraw = async () => {\n    // On clicking the BG show the drawing mode..\n    if (!canDraw) setShowPopup(true);\n    if (!canDraw) setCanDraw(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    onClick: () => onDraw(),\n    children: [showPopup ? /*#__PURE__*/_jsxDEV(PopupComp, {\n      setShowPopup: setShowPopup,\n      message: popupMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 20\n    }, this) : null, canDraw ? /*#__PURE__*/_jsxDEV(CanvasControls, {\n      canvasRef: canvasRef,\n      setCanDraw: setCanDraw,\n      setPopupMessage: setPopupMessage,\n      setShowPopup: setShowPopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(ReactSketchCanvas, {\n      ref: canvasRef,\n      canvasColor: \"transparent\",\n      width: canDraw ? \"100vw\" : \"0\",\n      height: canDraw ? \"100vh\" : \"0\",\n      strokeWidth: canDraw ? 3 : 0,\n      strokeColor: theme.borderColor,\n      withTimestamp: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"JrBWKSatKTm8KzMBKdGPrmMVDIY=\");\n\n_c2 = Index;\nexport default Index;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Index\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/Canvas/Index.tsx"],"names":["useContext","useState","useEffect","ThemeContext","styled","ReactSketchCanvas","CanvasControls","getDrawingData","PopupComp","Container","div","Index","canvasRef","canDraw","setCanDraw","theme","showPopup","setShowPopup","popupMessage","setPopupMessage","getInitialDrawing","drawingData","paths","JSON","parse","data","rows","current","loadPaths","onDraw","borderColor"],"mappings":";;;AAAA,SAA4BA,UAA5B,EAAwCC,QAAxC,EAAkDC,SAAlD,QAAmE,OAAnE;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,OAAOC,SAAP,MAAsB,SAAtB;;AAEA,MAAMC,SAAS,GAAGL,MAAM,CAACM,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,CANA;KAAMD,S;;AAcN,MAAME,KAAsC,GAAG,QAAwC;AAAA;;AAAA,MAAvC;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA;AAAtB,GAAuC;AACrF,QAAM;AAAEC,IAAAA;AAAF,MAAYf,UAAU,CAACG,YAAD,CAA5B;AAEA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAW,CACxD,6BADwD,EAEzD,GAFyD,EAGxD,+DAHwD,EAIxD,yHAJwD,EAKxD,WALwD,CAAX,CAAhD,CAJqF,CAYrF;;AACA,QAAMmB,iBAAiB,GAAG,YAAY;AACpC,UAAMC,WAAW,GAAG,MAAMd,cAAc,EAAxC;AACA,UAAMe,KAAK,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWH,WAAW,CAACI,IAAZ,CAAiBA,IAAjB,CAAsBC,IAAtB,CAA2B,CAA3B,EAA8BD,IAAzC,CAApB;AACA,UAAMb,SAAS,CAACe,OAAV,CAAkBC,SAAlB,CAA4BN,KAA5B,CAAN;AACD,GAJD;;AAMApB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,iBAAiB;AACjB,QAAIP,OAAJ,EAAaI,YAAY,CAAC,IAAD,CAAZ;AACd,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMY,MAAM,GAAG,YAAY;AACzB;AACA,QAAI,CAAChB,OAAL,EAAcI,YAAY,CAAC,IAAD,CAAZ;AACd,QAAI,CAACJ,OAAL,EAAcC,UAAU,CAAC,IAAD,CAAV;AACf,GAJD;;AAMA,sBACE,QAAC,SAAD;AAAW,IAAA,OAAO,EAAE,MAAMe,MAAM,EAAhC;AAAA,eACGb,SAAS,gBAAG,QAAC,SAAD;AAAW,MAAA,YAAY,EAAEC,YAAzB;AAAuC,MAAA,OAAO,EAAEC;AAAhD;AAAA;AAAA;AAAA;AAAA,YAAH,GAAsE,IADlF,EAGGL,OAAO,gBACN,QAAC,cAAD;AACE,MAAA,SAAS,EAAED,SADb;AAEE,MAAA,UAAU,EAAEE,UAFd;AAGE,MAAA,eAAe,EAAEK,eAHnB;AAIE,MAAA,YAAY,EAAEF;AAJhB;AAAA;AAAA;AAAA;AAAA,YADM,GAOJ,IAVN,eAYE,QAAC,iBAAD;AACE,MAAA,GAAG,EAAEL,SADP;AAEE,MAAA,WAAW,EAAC,aAFd;AAGE,MAAA,KAAK,EAAEC,OAAO,GAAG,OAAH,GAAa,GAH7B;AAIE,MAAA,MAAM,EAAEA,OAAO,GAAG,OAAH,GAAa,GAJ9B;AAKE,MAAA,WAAW,EAAEA,OAAO,GAAG,CAAH,GAAO,CAL7B;AAME,MAAA,WAAW,EAAEE,KAAK,CAACe,WANrB;AAOE,MAAA,aAAa,EAAE;AAPjB;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CAtDD;;GAAMnB,K;;MAAAA,K;AAwDN,eAAeA,KAAf","sourcesContent":["import { FunctionComponent, useContext, useState, useEffect } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport styled from \"styled-components\";\nimport { ReactSketchCanvas } from \"react-sketch-canvas\";\n\nimport CanvasControls from \"./CanvasControls\";\nimport { getDrawingData } from \"./services/dbService\";\nimport PopupComp from \"./Popup\";\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n`;\n\ninterface ICanvasProps {\n  canvasRef: React.MutableRefObject<any>;\n  canDraw: boolean;\n  setCanDraw: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst Index: FunctionComponent<ICanvasProps> = ({ canvasRef, canDraw, setCanDraw }) => {\n  const { theme } = useContext(ThemeContext);\n\n  const [showPopup, setShowPopup] = useState(false);\n  const [popupMessage, setPopupMessage] = useState<string[]>([\n    `Activated the drawing mode!`,\n    \" \",\n    `Anyone can add the the canvas and create a community drawing.`,\n    `The erase button will erase the whole drawing, save will upload and overwrite the image and close will close this mode!`,\n    `Have fun.`,\n  ]);\n\n  // Get current drawing state from the DB..\n  const getInitialDrawing = async () => {\n    const drawingData = await getDrawingData();\n    const paths = await JSON.parse(drawingData.data.data.rows[0].data);\n    await canvasRef.current.loadPaths(paths);\n  };\n\n  useEffect(() => {\n    getInitialDrawing();\n    if (canDraw) setShowPopup(true);\n  }, []);\n\n  const onDraw = async () => {\n    // On clicking the BG show the drawing mode..\n    if (!canDraw) setShowPopup(true);\n    if (!canDraw) setCanDraw(true);\n  };\n\n  return (\n    <Container onClick={() => onDraw()}>\n      {showPopup ? <PopupComp setShowPopup={setShowPopup} message={popupMessage} /> : null}\n\n      {canDraw ? (\n        <CanvasControls\n          canvasRef={canvasRef}\n          setCanDraw={setCanDraw}\n          setPopupMessage={setPopupMessage}\n          setShowPopup={setShowPopup}\n        />\n      ) : null}\n\n      <ReactSketchCanvas\n        ref={canvasRef}\n        canvasColor=\"transparent\"\n        width={canDraw ? \"100vw\" : \"0\"}\n        height={canDraw ? \"100vh\" : \"0\"}\n        strokeWidth={canDraw ? 3 : 0}\n        strokeColor={theme.borderColor}\n        withTimestamp={true}\n      />\n    </Container>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}