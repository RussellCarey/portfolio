{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/Login/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext, useState, useRef } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport { PageContainer, UserIconContainer, UserIcon, InputField, FakeInputField, HelpBox, LoginButton, AnimatedLogin } from \"./styles/styled\";\nimport { delayTime } from \"./utils/typing\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = _ref => {\n  _s();\n\n  let {\n    setIsLoggedIn\n  } = _ref;\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const [isLoading, setIsLoading] = useState(true);\n  const [nameState, setNameState] = useState(\"\");\n  const [passwordState, setPasswordState] = useState(\"\");\n  const nameRef = useRef(\"\");\n  const passwordRef = useRef(\"\");\n\n  const populateFieldTyping = async (ref, setState, text, startDelay) => {\n    await delayTime(startDelay); // Set blinking? For the text line?\n    // set type speed to a state (random?)\n\n    const textArray = text.split(\"\"); // Remember forEach is not async. Use for of..\n\n    for (const [i, letter] of textArray.entries()) {\n      const typingDelayTime = Math.random() * 200;\n      await delayTime(typingDelayTime);\n      ref.current = ref.current + letter;\n      setState(ref.current);\n      if (i === textArray.length) setIsLoading(false);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    populateFieldTyping(nameRef, setNameState, \"Russell Carey\", 0);\n    populateFieldTyping(passwordRef, setPasswordState, \"*****************\", 2000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(PageContainer, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(UserIconContainer, {\n        themeState: theme,\n        children: /*#__PURE__*/_jsxDEV(UserIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FakeInputField, {\n        themeState: theme,\n        children: /*#__PURE__*/_jsxDEV(InputField, {\n          themeState: theme,\n          type: \"text\",\n          value: nameState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FakeInputField, {\n        themeState: theme,\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          themeState: theme,\n          type: \"text\",\n          value: passwordState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HelpBox, {\n          themeState: theme,\n          children: \"?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(LoginButton, {\n        themeState: theme,\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(AnimatedLogin, {\n        themeState: theme,\n        onClick: () => setIsLoggedIn(true),\n        children: \"login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginPage, \"052WsWmQ7qA9CMdsxaUsaxYgUis=\");\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/Login/index.tsx"],"names":["React","useEffect","useContext","useState","useRef","ThemeContext","PageContainer","UserIconContainer","UserIcon","InputField","FakeInputField","HelpBox","LoginButton","AnimatedLogin","delayTime","LoginPage","setIsLoggedIn","theme","isLoading","setIsLoading","nameState","setNameState","passwordState","setPasswordState","nameRef","passwordRef","populateFieldTyping","ref","setState","text","startDelay","textArray","split","i","letter","entries","typingDelayTime","Math","random","current","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState, FunctionComponent, useRef } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport {\n  PageContainer,\n  UserIconContainer,\n  UserIcon,\n  InputField,\n  FakeInputField,\n  HelpBox,\n  LoginButton,\n  AnimatedLogin,\n} from \"./styles/styled\";\nimport { delayTime } from \"./utils/typing\";\nimport Loading from \"../InnerPages/Loading\";\n\ninterface ILoginPage {\n  setIsLoggedIn: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst LoginPage: FunctionComponent<ILoginPage> = ({ setIsLoggedIn }) => {\n  const { theme } = useContext(ThemeContext);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [nameState, setNameState] = useState<string>(\"\");\n  const [passwordState, setPasswordState] = useState<string>(\"\");\n  const nameRef = useRef<string>(\"\");\n  const passwordRef = useRef<string>(\"\");\n\n  const populateFieldTyping = async (\n    ref: React.MutableRefObject<string>,\n    setState: React.Dispatch<React.SetStateAction<string>>,\n    text: string,\n    startDelay: number\n  ) => {\n    await delayTime(startDelay);\n    // Set blinking? For the text line?\n\n    // set type speed to a state (random?)\n\n    const textArray = text.split(\"\");\n    // Remember forEach is not async. Use for of..\n    for (const [i, letter] of textArray.entries()) {\n      const typingDelayTime = Math.random() * 200;\n      await delayTime(typingDelayTime);\n      ref.current = ref.current + letter;\n      setState(ref.current);\n\n      if (i === textArray.length) setIsLoading(false);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    populateFieldTyping(nameRef, setNameState, \"Russell Carey\", 0);\n    populateFieldTyping(passwordRef, setPasswordState, \"*****************\", 2000);\n  }, []);\n\n  return (\n    <PageContainer>\n      <>\n        <UserIconContainer themeState={theme}>\n          <UserIcon />\n        </UserIconContainer>\n        <FakeInputField themeState={theme}>\n          <InputField themeState={theme} type=\"text\" value={nameState} />\n        </FakeInputField>\n        <FakeInputField themeState={theme}>\n          <InputField themeState={theme} type=\"text\" value={passwordState} />\n          <HelpBox themeState={theme}>?</HelpBox>\n        </FakeInputField>\n        {isLoading ? (\n          <LoginButton themeState={theme}>loading</LoginButton>\n        ) : (\n          <AnimatedLogin themeState={theme} onClick={() => setIsLoggedIn(true)}>\n            login\n          </AnimatedLogin>\n        )}\n      </>\n    </PageContainer>\n  );\n};\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}