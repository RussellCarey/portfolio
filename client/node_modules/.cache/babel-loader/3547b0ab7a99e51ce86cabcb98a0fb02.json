{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/InnerPages/Projects/ProjectsFolder.tsx\",\n    _s = $RefreshSig$();\n\nimport prismicClient from \"../../../utils/prismic\";\nimport { useEffect, useState } from \"react\";\nimport { Container } from \"./styles/styled\";\nimport { EPageNames, EWindowTypes } from \"../../../interfaces/types\";\nimport Icon from \"../../Icons/Index\";\nimport Loading from \"../../Desktop/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProjectsPage = _ref => {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const [selectedIcon, setSelectedIcon] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [projects, setProjects] = useState(null);\n\n  const getAndSetProjects = async () => {\n    try {\n      const prismicDocs = await prismicClient.getAllByTag(\"projects\");\n      setProjects(prismicDocs);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error.response);\n    }\n  };\n\n  useEffect(() => {\n    getAndSetProjects();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 20\n    }, this) : null, projects ? projects.map(project => {\n      return /*#__PURE__*/_jsxDEV(Icon, {\n        isProject: true,\n        data: project,\n        text: project.data.project_name[0].text,\n        pageName: EPageNames.project,\n        windowType: EWindowTypes.noSidebar,\n        aniDelay: 0,\n        isWeb: null,\n        selectedIcon: selectedIcon,\n        setSelectedIcon: setSelectedIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }, this);\n    }) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProjectsPage, \"3+tKOUHlw1NecBrCfqNP847Y1qM=\");\n\n_c = ProjectsPage;\nexport default ProjectsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectsPage\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/InnerPages/Projects/ProjectsFolder.tsx"],"names":["prismicClient","useEffect","useState","Container","EPageNames","EWindowTypes","Icon","Loading","ProjectsPage","data","selectedIcon","setSelectedIcon","isLoading","setIsLoading","projects","setProjects","getAndSetProjects","prismicDocs","getAllByTag","error","console","log","response","map","project","project_name","text","noSidebar"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,wBAA1B;AACA,SAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAGA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,2BAAzC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,MAAMC,YAAmD,GAAG,QAAc;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACxE,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAS,EAAT,CAAhD;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAU,IAAV,CAA1C;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAa,IAAb,CAAxC;;AAEA,QAAMc,iBAAiB,GAAG,YAAY;AACpC,QAAI;AACF,YAAMC,WAAW,GAAG,MAAMjB,aAAa,CAACkB,WAAd,CAA0B,UAA1B,CAA1B;AACAH,MAAAA,WAAW,CAACE,WAAD,CAAX;AACAJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAJD,CAIE,OAAOM,KAAP,EAAmB;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAlB;AACD;AACF,GARD;;AAUArB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,SAAD;AAAA,eACGJ,SAAS,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GAAiB,IAD7B,EAEGE,QAAQ,GACLA,QAAQ,CAACS,GAAT,CAAcC,OAAD,IAAkB;AAC7B,0BACE,QAAC,IAAD;AACE,QAAA,SAAS,EAAE,IADb;AAEE,QAAA,IAAI,EAAEA,OAFR;AAGE,QAAA,IAAI,EAAEA,OAAO,CAACf,IAAR,CAAagB,YAAb,CAA0B,CAA1B,EAA6BC,IAHrC;AAIE,QAAA,QAAQ,EAAEtB,UAAU,CAACoB,OAJvB;AAKE,QAAA,UAAU,EAAEnB,YAAY,CAACsB,SAL3B;AAME,QAAA,QAAQ,EAAE,CANZ;AAOE,QAAA,KAAK,EAAE,IAPT;AAQE,QAAA,YAAY,EAAEjB,YARhB;AASE,QAAA,eAAe,EAAEC;AATnB;AAAA;AAAA;AAAA;AAAA,cADF;AAaD,KAdD,CADK,GAgBL,IAlBN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAzCD;;GAAMH,Y;;KAAAA,Y;AA2CN,eAAeA,YAAf","sourcesContent":["import prismicClient from \"../../../utils/prismic\";\nimport { FunctionComponent, useEffect, useState } from \"react\";\nimport { Container } from \"./styles/styled\";\nimport { IProjectsPageProps } from \"./types/types\";\n\nimport { EPageNames, EWindowTypes } from \"../../../interfaces/types\";\nimport Icon from \"../../Icons/Index\";\nimport Loading from \"../../Desktop/Spinner\";\n\nconst ProjectsPage: FunctionComponent<IProjectsPageProps> = ({ data }) => {\n  const [selectedIcon, setSelectedIcon] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [projects, setProjects] = useState<any | null>(null);\n\n  const getAndSetProjects = async () => {\n    try {\n      const prismicDocs = await prismicClient.getAllByTag(\"projects\");\n      setProjects(prismicDocs);\n      setIsLoading(false);\n    } catch (error: any) {\n      console.log(error.response);\n    }\n  };\n\n  useEffect(() => {\n    getAndSetProjects();\n  }, []);\n\n  return (\n    <Container>\n      {isLoading ? <Loading /> : null}\n      {projects\n        ? projects.map((project: any) => {\n            return (\n              <Icon\n                isProject={true}\n                data={project}\n                text={project.data.project_name[0].text}\n                pageName={EPageNames.project}\n                windowType={EWindowTypes.noSidebar}\n                aniDelay={0}\n                isWeb={null}\n                selectedIcon={selectedIcon}\n                setSelectedIcon={setSelectedIcon}\n              />\n            );\n          })\n        : null}\n    </Container>\n  );\n};\n\nexport default ProjectsPage;\n"]},"metadata":{},"sourceType":"module"}