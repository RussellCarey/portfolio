{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/Login/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext, useState, useRef } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport { PageContainer, UserIconContainer, UserIcon, InputField, FakeInputField, HelpBox, AnimatedLogin } from \"./styles/styled\";\nimport { delayTime } from \"./utils/typing\";\nimport Loading from \"../InnerPages/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = _ref => {\n  _s();\n\n  let {\n    setIsLoggedIn\n  } = _ref;\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const [isLoading, setIsLoading] = useState(false);\n  const [nameState, setNameState] = useState(\"\");\n  const nameRef = useRef(\"\");\n  const [passwordState, setPasswordState] = useState(\"\");\n\n  const populateFieldTyping = async text => {\n    // Set blinking? For the text line?\n    // set type speed to a state (random?)\n    const textArray = text.split(\"\"); // Remember forEach is not async. Use for of..\n\n    for (const letter of textArray) {\n      await delayTime(1000);\n      nameRef.current = nameRef.current + letter;\n      setNameState(nameRef.current);\n    }\n  };\n\n  useEffect(() => {\n    populateFieldTyping(\"Russell Carey\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(PageContainer, {\n    children: !isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(UserIconContainer, {\n        themeState: theme,\n        children: /*#__PURE__*/_jsxDEV(UserIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FakeInputField, {\n        themeState: theme,\n        children: /*#__PURE__*/_jsxDEV(InputField, {\n          themeState: theme,\n          type: \"text\",\n          value: nameState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FakeInputField, {\n        themeState: theme,\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          themeState: theme,\n          type: \"text\",\n          value: passwordState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(HelpBox, {\n          themeState: theme,\n          children: \"?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AnimatedLogin, {\n        themeState: theme,\n        onClick: () => setIsLoggedIn(true),\n        children: \"login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginPage, \"nAfQrKoWL2g6Ec7ud0zow5u/dIo=\");\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/Login/index.tsx"],"names":["React","useEffect","useContext","useState","useRef","ThemeContext","PageContainer","UserIconContainer","UserIcon","InputField","FakeInputField","HelpBox","AnimatedLogin","delayTime","Loading","LoginPage","setIsLoggedIn","theme","isLoading","setIsLoading","nameState","setNameState","nameRef","passwordState","setPasswordState","populateFieldTyping","text","textArray","split","letter","current"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,QAAvC,EAAoEC,MAApE,QAAkF,OAAlF;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,SACEC,aADF,EAEEC,iBAFF,EAGEC,QAHF,EAIEC,UAJF,EAKEC,cALF,EAMEC,OANF,EAQEC,aARF,QASO,iBATP;AAUA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;;AAMA,MAAMC,SAAwC,GAAG,QAAuB;AAAA;;AAAA,MAAtB;AAAEC,IAAAA;AAAF,GAAsB;AACtE,QAAM;AAAEC,IAAAA;AAAF,MAAYf,UAAU,CAACG,YAAD,CAA5B;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAS,EAAT,CAA1C;AACA,QAAMmB,OAAO,GAAGlB,MAAM,CAAS,EAAT,CAAtB;AACA,QAAM,CAACmB,aAAD,EAAgBC,gBAAhB,IAAoCrB,QAAQ,CAAS,EAAT,CAAlD;;AAEA,QAAMsB,mBAAmB,GAAG,MAAOC,IAAP,IAAwB;AAClD;AAEA;AAEA,UAAMC,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAW,EAAX,CAAlB,CALkD,CAMlD;;AACA,SAAK,MAAMC,MAAX,IAAqBF,SAArB,EAAgC;AAC9B,YAAMd,SAAS,CAAC,IAAD,CAAf;AACAS,MAAAA,OAAO,CAACQ,OAAR,GAAkBR,OAAO,CAACQ,OAAR,GAAkBD,MAApC;AACAR,MAAAA,YAAY,CAACC,OAAO,CAACQ,OAAT,CAAZ;AACD;AACF,GAZD;;AAcA7B,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,mBAAmB,CAAC,eAAD,CAAnB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,aAAD;AAAA,cACG,CAACP,SAAD,gBACC;AAAA,8BACE,QAAC,iBAAD;AAAmB,QAAA,UAAU,EAAED,KAA/B;AAAA,+BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,cAAD;AAAgB,QAAA,UAAU,EAAEA,KAA5B;AAAA,+BACE,QAAC,UAAD;AAAY,UAAA,UAAU,EAAEA,KAAxB;AAA+B,UAAA,IAAI,EAAC,MAApC;AAA2C,UAAA,KAAK,EAAEG;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE,QAAC,cAAD;AAAgB,QAAA,UAAU,EAAEH,KAA5B;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,UAAU,EAAEA,KAAxB;AAA+B,UAAA,IAAI,EAAC,MAApC;AAA2C,UAAA,KAAK,EAAEM;AAAlD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,OAAD;AAAS,UAAA,UAAU,EAAEN,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAWE,QAAC,aAAD;AAAe,QAAA,UAAU,EAAEA,KAA3B;AAAkC,QAAA,OAAO,EAAE,MAAMD,aAAa,CAAC,IAAD,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA,oBADD,gBAiBC,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAlBJ;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAhDD;;GAAMD,S;;KAAAA,S;AAkDN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useContext, useState, FunctionComponent, useRef } from \"react\";\nimport ThemeContext from \"../../context/theme/themeContext\";\nimport {\n  PageContainer,\n  UserIconContainer,\n  UserIcon,\n  InputField,\n  FakeInputField,\n  HelpBox,\n  LoginButton,\n  AnimatedLogin,\n} from \"./styles/styled\";\nimport { delayTime } from \"./utils/typing\";\nimport Loading from \"../InnerPages/Loading\";\n\ninterface ILoginPage {\n  setIsLoggedIn: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst LoginPage: FunctionComponent<ILoginPage> = ({ setIsLoggedIn }) => {\n  const { theme } = useContext(ThemeContext);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [nameState, setNameState] = useState<string>(\"\");\n  const nameRef = useRef<string>(\"\");\n  const [passwordState, setPasswordState] = useState<string>(\"\");\n\n  const populateFieldTyping = async (text: string) => {\n    // Set blinking? For the text line?\n\n    // set type speed to a state (random?)\n\n    const textArray = text.split(\"\");\n    // Remember forEach is not async. Use for of..\n    for (const letter of textArray) {\n      await delayTime(1000);\n      nameRef.current = nameRef.current + letter;\n      setNameState(nameRef.current);\n    }\n  };\n\n  useEffect(() => {\n    populateFieldTyping(\"Russell Carey\");\n  }, []);\n\n  return (\n    <PageContainer>\n      {!isLoading ? (\n        <>\n          <UserIconContainer themeState={theme}>\n            <UserIcon />\n          </UserIconContainer>\n          <FakeInputField themeState={theme}>\n            <InputField themeState={theme} type=\"text\" value={nameState} />\n          </FakeInputField>\n          <FakeInputField themeState={theme}>\n            <InputField themeState={theme} type=\"text\" value={passwordState} />\n            <HelpBox themeState={theme}>?</HelpBox>\n          </FakeInputField>\n          <AnimatedLogin themeState={theme} onClick={() => setIsLoggedIn(true)}>\n            login\n          </AnimatedLogin>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </PageContainer>\n  );\n};\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}