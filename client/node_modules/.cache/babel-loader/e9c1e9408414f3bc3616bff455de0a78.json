{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/portfolio-final/client/src/components/InnerPages/Projects/ProjectsFolder.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from \"react\";\nimport { Container } from \"./styles/styled\";\nimport ThemeContext from \"../../../context/theme/themeContext\";\nimport { getDocumentsByTag } from \"./services/projectServices\";\nimport { EPageNames, EWindowTypes } from \"../../../interfaces/types\";\nimport Icon from \"../../Icons/Index\";\nimport Loading from \"../../Desktop/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProjectsPage = _ref => {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const [selectedIcon, setSelectedIcon] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [projects, setProjects] = useState(null); //! Check for error ??!??\n\n  const getAndSetProjects = async () => {\n    const projects = await getDocumentsByTag(\"projects\"); // Error check?\n\n    setProjects(projects);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    getAndSetProjects();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 20\n    }, this) : null, projects ? projects.map(p => {\n      return /*#__PURE__*/_jsxDEV(Icon, {\n        isProject: true,\n        data: p,\n        text: p.data.project_name[0].text,\n        pageName: EPageNames.project,\n        windowType: EWindowTypes.noSidebar,\n        aniDelay: 0,\n        isWeb: null,\n        selectedIcon: selectedIcon,\n        setSelectedIcon: setSelectedIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this);\n    }) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProjectsPage, \"8Qkk1tSWc8uvEv7QLNUP+JvKkuM=\");\n\n_c = ProjectsPage;\nexport default ProjectsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectsPage\");","map":{"version":3,"sources":["/Users/r/Desktop/portfolio-final/client/src/components/InnerPages/Projects/ProjectsFolder.tsx"],"names":["useEffect","useState","useContext","Container","ThemeContext","getDocumentsByTag","EPageNames","EWindowTypes","Icon","Loading","ProjectsPage","data","theme","selectedIcon","setSelectedIcon","isLoading","setIsLoading","projects","setProjects","getAndSetProjects","map","p","project_name","text","project","noSidebar"],"mappings":";;;AAAA,SAA4BA,SAA5B,EAAuCC,QAAvC,EAAiDC,UAAjD,QAAmE,OAAnE;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,OAAOC,YAAP,MAAyB,qCAAzB;AAEA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,2BAAzC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,MAAMC,YAAmD,GAAG,QAAc;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACxE,QAAM;AAAEC,IAAAA;AAAF,MAAYV,UAAU,CAACE,YAAD,CAA5B;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAS,EAAT,CAAhD;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAU,IAAV,CAA1C;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAa,IAAb,CAAxC,CAJwE,CAMxE;;AACA,QAAMkB,iBAAiB,GAAG,YAAY;AACpC,UAAMF,QAAQ,GAAG,MAAMZ,iBAAiB,CAAC,UAAD,CAAxC,CADoC,CAEpC;;AACAa,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAD,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GALD;;AAOAhB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,SAAD;AAAA,eACGJ,SAAS,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GAAiB,IAD7B,EAGGE,QAAQ,GACLA,QAAQ,CAACG,GAAT,CAAcC,CAAD,IAAY;AACvB,0BACE,QAAC,IAAD;AACE,QAAA,SAAS,EAAE,IADb;AAEE,QAAA,IAAI,EAAEA,CAFR;AAGE,QAAA,IAAI,EAAEA,CAAC,CAACV,IAAF,CAAOW,YAAP,CAAoB,CAApB,EAAuBC,IAH/B;AAIE,QAAA,QAAQ,EAAEjB,UAAU,CAACkB,OAJvB;AAKE,QAAA,UAAU,EAAEjB,YAAY,CAACkB,SAL3B;AAME,QAAA,QAAQ,EAAE,CANZ;AAOE,QAAA,KAAK,EAAE,IAPT;AAQE,QAAA,YAAY,EAAEZ,YARhB;AASE,QAAA,eAAe,EAAEC;AATnB;AAAA;AAAA;AAAA;AAAA,cADF;AAaD,KAdD,CADK,GAgBL,IAnBN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAzCD;;GAAMJ,Y;;KAAAA,Y;AA2CN,eAAeA,YAAf","sourcesContent":["import { FunctionComponent, useEffect, useState, useContext } from \"react\";\nimport { Container } from \"./styles/styled\";\nimport { IProjectsPageProps } from \"./types/types\";\nimport ThemeContext from \"../../../context/theme/themeContext\";\n\nimport { getDocumentsByTag } from \"./services/projectServices\";\nimport { EPageNames, EWindowTypes } from \"../../../interfaces/types\";\nimport Icon from \"../../Icons/Index\";\nimport Loading from \"../../Desktop/Spinner\";\n\nconst ProjectsPage: FunctionComponent<IProjectsPageProps> = ({ data }) => {\n  const { theme } = useContext(ThemeContext);\n  const [selectedIcon, setSelectedIcon] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [projects, setProjects] = useState<any | null>(null);\n\n  //! Check for error ??!??\n  const getAndSetProjects = async () => {\n    const projects = await getDocumentsByTag(\"projects\");\n    // Error check?\n    setProjects(projects);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    getAndSetProjects();\n  }, []);\n\n  return (\n    <Container>\n      {isLoading ? <Loading /> : null}\n      {/* {isLoading} ------- SHOW LOADING ANIMATION ETC.. */}\n      {projects\n        ? projects.map((p: any) => {\n            return (\n              <Icon\n                isProject={true}\n                data={p}\n                text={p.data.project_name[0].text}\n                pageName={EPageNames.project}\n                windowType={EWindowTypes.noSidebar}\n                aniDelay={0}\n                isWeb={null}\n                selectedIcon={selectedIcon}\n                setSelectedIcon={setSelectedIcon}\n              />\n            );\n          })\n        : null}\n    </Container>\n  );\n};\n\nexport default ProjectsPage;\n"]},"metadata":{},"sourceType":"module"}