{"ast":null,"code":"import { LinkType, RichTextNodeType } from '@prismicio/types';\nimport { asText as asText$1, composeSerializers, wrapMapSerializer, Element, serialize } from '@prismicio/richtext';\nexport { Element } from '@prismicio/richtext';\nimport escapeHtml from 'escape-html';\nimport { buildURL, buildWidthSrcSet, buildPixelDensitySrcSet } from 'imgix-url-builder';\n\nconst asDate = dateOrTimestampField => {\n  if (!dateOrTimestampField) {\n    return null;\n  }\n\n  if (dateOrTimestampField.length === 24) {\n    return new Date(dateOrTimestampField.replace(/(\\+|-)(\\d{2})(\\d{2})$/, \".000$1$2:$3\"));\n  } else {\n    return new Date(dateOrTimestampField);\n  }\n};\n\nconst documentToLinkField = prismicDocument => {\n  var _a, _b, _c;\n\n  return {\n    link_type: LinkType.Document,\n    id: prismicDocument.id,\n    uid: (_a = prismicDocument.uid) != null ? _a : void 0,\n    type: prismicDocument.type,\n    tags: prismicDocument.tags,\n    lang: prismicDocument.lang,\n    url: (_b = prismicDocument.url) != null ? _b : void 0,\n    slug: (_c = prismicDocument.slugs) == null ? void 0 : _c[0],\n    ...(Object.keys(prismicDocument.data).length > 0 ? {\n      data: prismicDocument.data\n    } : {})\n  };\n};\n\nconst asLink = (linkFieldOrDocument, linkResolver) => {\n  if (!linkFieldOrDocument) {\n    return null;\n  }\n\n  const linkField = \"link_type\" in linkFieldOrDocument ? linkFieldOrDocument : documentToLinkField(linkFieldOrDocument);\n\n  switch (linkField.link_type) {\n    case LinkType.Media:\n    case LinkType.Web:\n      return \"url\" in linkField ? linkField.url : null;\n\n    case LinkType.Document:\n      {\n        if (\"id\" in linkField && linkResolver) {\n          const resolvedURL = linkResolver(linkField);\n\n          if (resolvedURL != null) {\n            return resolvedURL;\n          }\n        }\n\n        if (\"url\" in linkField && linkField.url) {\n          return linkField.url;\n        }\n\n        return null;\n      }\n\n    case LinkType.Any:\n    default:\n      return null;\n  }\n};\n\nconst asText = (richTextField, separator) => {\n  if (richTextField) {\n    return asText$1(richTextField, separator);\n  } else {\n    return null;\n  }\n};\n\nconst getLabel = node => {\n  return \"data\" in node && \"label\" in node.data ? ` class=\"${node.data.label}\"` : \"\";\n};\n\nconst serializeStandardTag = (tag, node, children) => {\n  return `<${tag}${getLabel(node)}>${children.join(\"\")}</${tag}>`;\n};\n\nconst serializePreFormatted = node => {\n  return `<pre${getLabel(node)}>${escapeHtml(node.text)}</pre>`;\n};\n\nconst serializeImage = (linkResolver, node) => {\n  let imageTag = `<img src=\"${node.url}\" alt=\"${escapeHtml(node.alt)}\"${node.copyright ? ` copyright=\"${escapeHtml(node.copyright)}\"` : \"\"} />`;\n\n  if (node.linkTo) {\n    imageTag = serializeHyperlink(linkResolver, {\n      type: RichTextNodeType.hyperlink,\n      data: node.linkTo,\n      start: 0,\n      end: 0\n    }, [imageTag]);\n  }\n\n  return `<p class=\"block-img\">${imageTag}</p>`;\n};\n\nconst serializeEmbed = node => {\n  return `<div data-oembed=\"${node.oembed.embed_url}\" data-oembed-type=\"${node.oembed.type}\" data-oembed-provider=\"${node.oembed.provider_name}\"${getLabel(node)}>${node.oembed.html}</div>`;\n};\n\nconst serializeHyperlink = (linkResolver, node, children) => {\n  switch (node.data.link_type) {\n    case LinkType.Web:\n      {\n        return `<a href=\"${escapeHtml(node.data.url)}\" target=\"${node.data.target}\" rel=\"noopener noreferrer\"${getLabel(node)}>${children.join(\"\")}</a>`;\n      }\n\n    case LinkType.Document:\n      {\n        return `<a href=\"${asLink(node.data, linkResolver)}\"${getLabel(node)}>${children.join(\"\")}</a>`;\n      }\n\n    case LinkType.Media:\n      {\n        return `<a href=\"${node.data.url}\"${getLabel(node)}>${children.join(\"\")}</a>`;\n      }\n  }\n};\n\nconst serializeSpan = content => {\n  return content ? escapeHtml(content).replace(/\\n/g, \"<br />\") : \"\";\n};\n\nconst createDefaultHTMLSerializer = linkResolver => {\n  return (_type, node, text, children, _key) => {\n    switch (node.type) {\n      case Element.heading1:\n        return serializeStandardTag(\"h1\", node, children);\n\n      case Element.heading2:\n        return serializeStandardTag(\"h2\", node, children);\n\n      case Element.heading3:\n        return serializeStandardTag(\"h3\", node, children);\n\n      case Element.heading4:\n        return serializeStandardTag(\"h4\", node, children);\n\n      case Element.heading5:\n        return serializeStandardTag(\"h5\", node, children);\n\n      case Element.heading6:\n        return serializeStandardTag(\"h6\", node, children);\n\n      case Element.paragraph:\n        return serializeStandardTag(\"p\", node, children);\n\n      case Element.preformatted:\n        return serializePreFormatted(node);\n\n      case Element.strong:\n        return serializeStandardTag(\"strong\", node, children);\n\n      case Element.em:\n        return serializeStandardTag(\"em\", node, children);\n\n      case Element.listItem:\n        return serializeStandardTag(\"li\", node, children);\n\n      case Element.oListItem:\n        return serializeStandardTag(\"li\", node, children);\n\n      case Element.list:\n        return serializeStandardTag(\"ul\", node, children);\n\n      case Element.oList:\n        return serializeStandardTag(\"ol\", node, children);\n\n      case Element.image:\n        return serializeImage(linkResolver, node);\n\n      case Element.embed:\n        return serializeEmbed(node);\n\n      case Element.hyperlink:\n        return serializeHyperlink(linkResolver, node, children);\n\n      case Element.label:\n        return serializeStandardTag(\"span\", node, children);\n\n      case Element.span:\n      default:\n        return serializeSpan(text);\n    }\n  };\n};\n\nconst wrapMapSerializerWithStringChildren = mapSerializer => {\n  const modifiedMapSerializer = {};\n\n  for (const tag in mapSerializer) {\n    const tagSerializer = mapSerializer[tag];\n\n    if (tagSerializer) {\n      modifiedMapSerializer[tag] = payload => {\n        return tagSerializer({ ...payload,\n          children: payload.children.join(\"\")\n        });\n      };\n    }\n  }\n\n  return wrapMapSerializer(modifiedMapSerializer);\n};\n\nconst asHTML = (richTextField, linkResolver, htmlSerializer) => {\n  if (richTextField) {\n    let serializer;\n\n    if (htmlSerializer) {\n      serializer = composeSerializers(typeof htmlSerializer === \"object\" ? wrapMapSerializerWithStringChildren(htmlSerializer) : (type, node, text, children, key) => htmlSerializer(type, node, text, children.join(\"\"), key), createDefaultHTMLSerializer(linkResolver));\n    } else {\n      serializer = createDefaultHTMLSerializer(linkResolver);\n    }\n\n    return serialize(richTextField, serializer).join(\"\");\n  } else {\n    return null;\n  }\n};\n\nconst isNonNullish = input => {\n  return input != null;\n};\n\nconst isNonEmptyArray = input => {\n  return !!input.length;\n};\n\nconst richText = field => {\n  if (field.length === 1 && \"text\" in field[0]) {\n    return !!field[0].text;\n  } else {\n    return !!field.length;\n  }\n};\n\nconst title = richText;\n\nconst imageThumbnail = thumbnail => {\n  return !!thumbnail.url;\n};\n\nconst image = field => {\n  return imageThumbnail(field);\n};\n\nconst link = field => {\n  return \"id\" in field || \"url\" in field;\n};\n\nconst linkToMedia = link;\nconst contentRelationship = link;\nconst date = isNonNullish;\nconst timestamp = isNonNullish;\nconst color = isNonNullish;\nconst number = isNonNullish;\nconst keyText = isNonNullish;\nconst select = isNonNullish;\n\nconst embed = field => {\n  return !!field.embed_url;\n};\n\nconst geoPoint = field => {\n  return \"longitude\" in field;\n};\n\nconst integrationFields = isNonNullish;\nconst group = isNonEmptyArray;\nconst sliceZone = isNonEmptyArray;\nvar isFilled = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  richText: richText,\n  title: title,\n  imageThumbnail: imageThumbnail,\n  image: image,\n  link: link,\n  linkToMedia: linkToMedia,\n  contentRelationship: contentRelationship,\n  date: date,\n  timestamp: timestamp,\n  color: color,\n  number: number,\n  keyText: keyText,\n  select: select,\n  embed: embed,\n  geoPoint: geoPoint,\n  integrationFields: integrationFields,\n  group: group,\n  sliceZone: sliceZone\n});\n\nconst asImageSrc = function (field) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (imageThumbnail(field)) {\n    return buildURL(field.url, params);\n  } else {\n    return null;\n  }\n};\n\nconst asImageWidthSrcSet = function (field) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (imageThumbnail(field)) {\n    const {\n      widths = [640, 828, 1200, 2048, 3840],\n      ...urlParams\n    } = params;\n    const {\n      url,\n      dimensions,\n      alt: _alt,\n      copyright: _copyright,\n      ...responsiveViews\n    } = field;\n    const responsiveViewObjects = Object.values(responsiveViews);\n    return {\n      src: buildURL(url, urlParams),\n      srcset: responsiveViewObjects.length ? [buildWidthSrcSet(url, { ...urlParams,\n        widths: [dimensions.width]\n      }), ...responsiveViewObjects.map(thumbnail => {\n        return buildWidthSrcSet(thumbnail.url, { ...urlParams,\n          widths: [thumbnail.dimensions.width]\n        });\n      })].join(\", \") : buildWidthSrcSet(field.url, { ...urlParams,\n        widths\n      })\n    };\n  } else {\n    return null;\n  }\n};\n\nconst asImagePixelDensitySrcSet = function (field) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (imageThumbnail(field)) {\n    const {\n      pixelDensities = [1, 2, 3],\n      ...imgixParams\n    } = params;\n    return {\n      src: buildURL(field.url, imgixParams),\n      srcset: buildPixelDensitySrcSet(field.url, { ...imgixParams,\n        pixelDensities\n      })\n    };\n  } else {\n    return null;\n  }\n};\n\nconst Elements = Element;\nexport { Elements, asDate, asHTML, asImagePixelDensitySrcSet, asImageSrc, asImageWidthSrcSet, asLink, asText, documentToLinkField, isFilled };","map":{"version":3,"mappings":";;;;;;MAUaA,SACZC,oBADqB,IAEJ;AACjB,MAAI,CAACA,oBAAL,EAA2B;AAC1B,WAAO,IAAP;AAAO;;AAIR,MAAIA,qBAAqBC,MAArB,KAAgC,EAApC,EAAwC;AAYvC,WAAO,IAAIC,IAAJ,CACNF,qBAAqBG,OAArB,CAA6B,uBAA7B,EAAsD,aAAtD,CADM,CAAP;AACuD,GAbxD,MAeO;AAEN,WAAO,IAAID,IAAJ,CAASF,oBAAT,CAAP;AAAgB;AAAA;;MChBLI,sBAGZC,eAHkC,IAQ9B;AA3BL;;AA4BC,SAAO;AACNC,eAAWC,SAASC,QADd;AAENC,QAAIJ,gBAAgBI,EAFd;AAGNC,SAAK,sBAAgBA,GAAhB,iBAAuB,MAHtB;AAINC,UAAMN,gBAAgBM,IAJhB;AAKNC,UAAMP,gBAAgBO,IALhB;AAMNC,UAAMR,gBAAgBQ,IANhB;AAONC,SAAK,sBAAgBA,GAAhB,iBAAuB,MAPtB;AAQNC,UAAM,sBAAgBC,KAAhB,wBAAwB,CAAxB,CARA;AAQwB,QAE1BC,OAAOC,IAAP,CAAYb,gBAAgBc,IAA5B,EAAkClB,MAAlC,GAA2C,CAA3C,GACD;AAAEkB,YAAMd,gBAAgBc;AAAxB,KADC,GAED,EAJ2B;AARxB,GAAP;AAYI;;MCxBQC,SAAS,CACrBC,mBADqB,EAErBC,YAFqB,KAG+B;AACpD,MAAI,CAACD,mBAAL,EAA0B;AACzB,WAAO,IAAP;AAAO;;AAIR,QAAME,YACL,eAAeF,mBAAf,GACGA,mBADH,GAEGjB,oBAAoBiB,mBAApB,CAHJ;;AAMA,UAAQE,UAAUjB,SAAlB;AAAkB,SACZC,SAASiB,KADG;AACH,SACTjB,SAASkB,GADA;AAEb,aAAO,SAASF,SAAT,GAAqBA,UAAUT,GAA/B,GAAqC,IAA5C;;AAA4C,SAExCP,SAASC,QAF+B;AAErB;AACvB,YAAI,QAAQe,SAAR,IAAqBD,YAAzB,EAAuC;AAEtC,gBAAMI,cAAcJ,aAAaC,SAAb,CAApB;;AAEA,cAAIG,eAAe,IAAnB,EAAyB;AACxB,mBAAOA,WAAP;AAAO;AAAA;;AAIT,YAAI,SAASH,SAAT,IAAsBA,UAAUT,GAApC,EAAyC;AAExC,iBAAOS,UAAUT,GAAjB;AAAiB;;AAIlB,eAAO,IAAP;AAAO;;AAAA,SAGHP,SAASoB,GAHN;AAGM;AAEb,aAAO,IAAP;AA1BF;AA0BS;;MC7CGC,SAAS,CACrBC,aADqB,EAErBC,SAFqB,KAGF;AACnB,MAAID,aAAJ,EAAmB;AAClB,WAAOE,SAAWF,aAAXE,EAA0BD,SAA1BC,CAAP;AAAiC,GADlC,MAEO;AACN,WAAO,IAAP;AAAO;AAAA;;MCJIC,WAAYC,IAAD,IAA8C;AACrE,SAAO,UAAUA,IAAV,IAAkB,WAAWA,KAAKd,IAAlC,GACJ,WAAWc,KAAKd,IAAL,CAAUe,QADjB,GAEJ,EAFH;AAEG;;MAGSC,uBAAuB,CACnCC,GADmC,EAEnCH,IAFmC,EAGnCI,QAHmC,KAIvB;AACZ,SAAO,IAAID,MAAMJ,SAASC,IAAT,CAAS,IAASI,SAASC,IAAT,CAAc,EAAd,CAAc,KAAQF,MAAzD;AAAyD;;MAG7CG,wBAAyBN,IAAD,IAAsC;AAC1E,SAAO,OAAOD,SAASC,IAAT,CAAS,IAASO,WAAWP,KAAKQ,IAAhB,CAAgB,QAAhD;AAAgD;;MAGpCC,iBAAiB,CAC7BpB,YAD6B,EAE7BW,IAF6B,KAGjB;AACZ,MAAIU,WAAW,aAAaV,KAAKnB,aAAa0B,WAAWP,KAAKW,GAAhB,CAAgB,IAC7DX,KAAKY,SAAL,GAAiB,eAAeL,WAAWP,KAAKY,SAAhB,CAAgB,GAAhD,GAAgE,OADjE;;AAKA,MAAIZ,KAAKa,MAAT,EAAiB;AAChBH,eAAWI,mBACVzB,YADU,EAEV;AACCX,YAAMqC,iBAAiBC,SADxB;AAEC9B,YAAMc,KAAKa,MAFZ;AAGCI,aAAO,CAHR;AAICC,WAAK;AAJN,KAFU,EAQV,CAACR,QAAD,CARU,CAAX;AAQE;;AAIH,SAAO,wBAAwBA,cAA/B;AAA+B;;MAGnBS,iBAAkBnB,IAAD,IAA+B;AAC5D,SAAO,qBAAqBA,KAAKoB,MAAL,CAAYC,gCACvCrB,KAAKoB,MAAL,CAAY1C,+BACcsB,KAAKoB,MAAL,CAAYE,iBAAiBvB,SAASC,IAAT,CAAS,IAChEA,KAAKoB,MAAL,CAAYG,YAHb;AAGa;;MAIDT,qBAAqB,CACjCzB,YADiC,EAEjCW,IAFiC,EAGjCI,QAHiC,KAIrB;AACZ,UAAQJ,KAAKd,IAAL,CAAUb,SAAlB;AAAkB,SACZC,SAASkB,GADG;AACE;AAClB,eAAO,YAAYe,WAAWP,KAAKd,IAAL,CAAUL,GAArB,CAAqB,aACvCmB,KAAKd,IAAL,CAAUsC,oCACmBzB,SAASC,IAAT,CAAS,IAASI,SAASC,IAAT,CAAc,EAAd,CAAc,MAF9D;AAE8D;;AAAA,SAG1D/B,SAASC,QAHiD;AAGvC;AACvB,eAAO,YAAYY,OAAOa,KAAKd,IAAZ,EAAkBG,YAAlB,CAAkB,IAAiBU,SACrDC,IADqD,CACrD,IACII,SAASC,IAAT,CAAc,EAAd,CAAc,MAFnB;AAEmB;;AAAA,SAGf/B,SAASiB,KAHM;AAGC;AACpB,eAAO,YAAYS,KAAKd,IAAL,CAAUL,OAAOkB,SAASC,IAAT,CAAS,IAASI,SAASC,IAAT,CACrD,EADqD,CACrD,MADD;AACC;AAfH;AAeG;;MAMSoB,gBAAiBC,OAAD,IAA8B;AAC1D,SAAOA,UAAUnB,WAAWmB,OAAX,EAAoBxD,OAApB,CAA4B,KAA5B,EAAmC,QAAnC,CAAV,GAAyD,EAAhE;AAAgE;;AC/DjE,MAAMyD,8BACLtC,YADmC,IAEK;AACxC,SAAO,CAACuC,KAAD,EAAQ5B,IAAR,EAAcQ,IAAd,EAAoBJ,QAApB,EAA8ByB,IAA9B,KAAuC;AAC7C,YAAQ7B,KAAKtB,IAAb;AAAa,WACPoD,QAAQC,QADD;AAEX,eAAO7B,qBAAqB,IAArB,EAA2BF,IAA3B,EAAiCI,QAAjC,CAAP;;AAAwC,WACpC0B,QAAQE,QAD4B;AAExC,eAAO9B,qBAAqB,IAArB,EAA2BF,IAA3B,EAAiCI,QAAjC,CAAP;;AAAwC,WACpC0B,QAAQG,QAD4B;AAExC,eAAO/B,qBAAqB,IAArB,EAA2BF,IAA3B,EAAiCI,QAAjC,CAAP;;AAAwC,WACpC0B,QAAQI,QAD4B;AAExC,eAAOhC,qBAAqB,IAArB,EAA2BF,IAA3B,EAAiCI,QAAjC,CAAP;;AAAwC,WACpC0B,QAAQK,QAD4B;AAExC,eAAOjC,qBAAqB,IAArB,EAA2BF,IAA3B,EAAiCI,QAAjC,CAAP;;AAAwC,WACpC0B,QAAQM,QAD4B;AAExC,eAAOlC,qBAAqB,IAArB,EAA2BF,IAA3B,EAAiCI,QAAjC,CAAP;;AAAwC,WACpC0B,QAAQO,SAD4B;AAExC,eAAOnC,qBAAqB,GAArB,EAA0BF,IAA1B,EAAgCI,QAAhC,CAAP;;AAAuC,WACnC0B,QAAQQ,YAD2B;AAEvC,eAAOhC,sBAAsBN,IAAtB,CAAP;;AAA6B,WACzB8B,QAAQS,MADiB;AAE7B,eAAOrC,qBAAqB,QAArB,EAA+BF,IAA/B,EAAqCI,QAArC,CAAP;;AAA4C,WACxC0B,QAAQU,EADgC;AAE5C,eAAOtC,qBAAqB,IAArB,EAA2BF,IAA3B,EAAiCI,QAAjC,CAAP;;AAAwC,WACpC0B,QAAQW,QAD4B;AAExC,eAAOvC,qBAAqB,IAArB,EAA2BF,IAA3B,EAAiCI,QAAjC,CAAP;;AAAwC,WACpC0B,QAAQY,SAD4B;AAExC,eAAOxC,qBAAqB,IAArB,EAA2BF,IAA3B,EAAiCI,QAAjC,CAAP;;AAAwC,WACpC0B,QAAQa,IAD4B;AAExC,eAAOzC,qBAAqB,IAArB,EAA2BF,IAA3B,EAAiCI,QAAjC,CAAP;;AAAwC,WACpC0B,QAAQc,KAD4B;AAExC,eAAO1C,qBAAqB,IAArB,EAA2BF,IAA3B,EAAiCI,QAAjC,CAAP;;AAAwC,WACpC0B,QAAQe,KAD4B;AAExC,eAAOpC,eAAepB,YAAf,EAA6BW,IAA7B,CAAP;;AAAoC,WAChC8B,QAAQgB,KADwB;AAEpC,eAAO3B,eAAenB,IAAf,CAAP;;AAAsB,WAClB8B,QAAQd,SADU;AAEtB,eAAOF,mBAAmBzB,YAAnB,EAAiCW,IAAjC,EAAuCI,QAAvC,CAAP;;AAA8C,WAC1C0B,QAAQ7B,KADkC;AAE9C,eAAOC,qBAAqB,MAArB,EAA6BF,IAA7B,EAAmCI,QAAnC,CAAP;;AAA0C,WACtC0B,QAAQiB,IAD8B;AAC9B;AAEZ,eAAOtB,cAAcjB,IAAd,CAAP;AAvCF;AAuCuB,GAxCxB;AAwCwB,CA3CzB;;AAyDA,MAAMwC,sCACLC,aAD2C,IAEH;AACxC,QAAMC,wBAAwB,EAA9B;;AAEA,aAAW/C,GAAX,IAAkB8C,aAAlB,EAAiC;AAChC,UAAME,gBAAgBF,cAAc9C,GAAd,CAAtB;;AAEA,QAAIgD,aAAJ,EAAmB;AAClBD,4BAAsB/C,GAAtB,IAA4DiD,OAAD,IAAa;AACvE,eAAOD,cAAc,KACjBC,OADiB;AAGpBhD,oBAAUgD,QAAQhD,QAAR,CAAiBC,IAAjB,CAAsB,EAAtB;AAHU,SAAd,CAAP;AAGiC,OAJlC;AAIkC;AAAA;;AAMpC,SAAOgD,kBAAkBH,qBAAlB,CAAP;AAAyB,CAnB1B;;MAkCaI,SAAS,CACrB1D,aADqB,EAErBP,YAFqB,EAGrBkE,cAHqB,KAIF;AACnB,MAAI3D,aAAJ,EAAmB;AAClB,QAAI4D,UAAJ;;AACA,QAAID,cAAJ,EAAoB;AACnBC,mBAAaC,mBACZ,OAAOF,cAAP,KAA0B,QAA1B,GACGP,oCAAoCO,cAApC,CADH,GAEG,CAAC7E,IAAD,EAAOsB,IAAP,EAAaQ,IAAb,EAAmBJ,QAAnB,EAA6BsD,GAA7B,KACAH,eAAe7E,IAAf,EAAqBsB,IAArB,EAA2BQ,IAA3B,EAAiCJ,SAASC,IAAT,CAAc,EAAd,CAAjC,EAAoDqD,GAApD,CAJS,EAKZ/B,4BAA4BtC,YAA5B,CALY,CAAb;AAK6B,KAN9B,MAQO;AACNmE,mBAAa7B,4BAA4BtC,YAA5B,CAAb;AAAyC;;AAG1C,WAAOsE,UAAU/D,aAAV,EAAyB4D,UAAzB,EAAqCnD,IAArC,CAA0C,EAA1C,CAAP;AAAiD,GAdlD,MAeO;AACN,WAAO,IAAP;AAAO;AAAA;;AC9GT,MAAMuD,eAAmBC,KAAJ,IAA0C;AAC9D,SAAOA,SAAS,IAAhB;AAAgB,CADjB;;AAYA,MAAMC,kBAAsBD,KAAJ,IAAyC;AAChE,SAAO,CAAC,CAACA,MAAM7F,MAAf;AAAe,CADhB;;MAWa+F,WACZC,KADuB,IAEe;AACtC,MAAIA,MAAMhG,MAAN,KAAiB,CAAjB,IAAsB,UAAUgG,MAAM,CAAN,CAApC,EAA8C;AAC7C,WAAO,CAAC,CAACA,MAAM,CAAN,EAASxD,IAAlB;AAAkB,GADnB,MAEO;AACN,WAAO,CAAC,CAACwD,MAAMhG,MAAf;AAAe;AAAA;;MAWJiG,QAAQF;;MAWRG,iBACZC,SAD6B,IAEe;AAC5C,SAAO,CAAC,CAACA,UAAUtF,GAAnB;AAAmB;;MAUPgE,QACZmB,KADoB,IAE+B;AACnD,SAAOE,eAAeF,KAAf,CAAP;AAAsB;;MAUVI,OAQZJ,KARmB,IASkD;AACrE,SAAO,QAAQA,KAAR,IAAiB,SAASA,KAAjC;AAAiC;;MAUrBK,cAAcD;MAWdE,sBAAsBF;MAkBtBG,OAAOX;MAWPY,YAAYZ;MAWZa,QAAQb;MAWRc,SAASd;MAWTe,UAAUf;MAWVgB,SAAShB;;MAWTd,QACZkB,KADoB,IAEqB;AACzC,SAAO,CAAC,CAACA,MAAM3C,SAAf;AAAe;;MAUHwD,WACZb,KADuB,IAEe;AACtC,SAAO,eAAeA,KAAtB;AAAsB;;MAUVc,oBAAoBlB;MAWpBmB,QAAQjB;MAaRkB,YAAYlB;;;;;;;;;;;;;;;;;;;;;;;MCpPZmB,aAAa,UACzBjB,KADyB,EAGQ;AAAA,MADjCkB,MACiC,uEADR,EACQ;;AACjC,MAAIC,eAAuBnB,KAAvBmB,CAAJ,EAAmC;AAClC,WAAOC,SAASpB,MAAMnF,GAAf,EAAoBqG,MAApB,CAAP;AAA2B,GAD5B,MAEO;AACN,WAAO,IAAP;AAAO;AAAA;;MCyBIG,qBAAqB,UACjCrB,KADiC,EAIQ;AAAA,MAFzCkB,MAEyC,uEADU,EACV;;AACzC,MAAIC,eAAuBnB,KAAvBmB,CAAJ,EAAmC;AAClC,UAAM;AAAEG,eAAS,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAiB,IAAjB,EAAuB,IAAvB,CAAX;AAAkC,SAAUC;AAA5C,QAA0DL,MAAhE;AACA,UAAM;AACLrG,SADK;AAEL2G,gBAFK;AAGL7E,WAAK8E,IAHA;AAIL7E,iBAAW8E,UAJN;AAIM,SACRC;AALE,QAMF3B,KANJ;AAUA,UAAM4B,wBACL5G,OAAO6G,MAAP,CAAcF,eAAd,CADD;AAGA,WAAO;AACNG,WAAKV,SAASvG,GAAT,EAAc0G,SAAd,CADC;AAENQ,cAAQH,sBAAsB5H,MAAtB,GACL,CACAgI,iBAAiBnH,GAAjB,EAAsB,KAClB0G,SADkB;AAErBD,gBAAQ,CAACE,WAAWS,KAAZ;AAFa,OAAtB,CADA,EAKA,GAAGL,sBAAsBM,GAAtB,CAA2B/B,SAAD,IAAe;AAC3C,eAAO6B,iBAAiB7B,UAAUtF,GAA3B,EAAgC,KACnC0G,SADmC;AAEtCD,kBAAQ,CAACnB,UAAUqB,UAAV,CAAqBS,KAAtB;AAF8B,SAAhC,CAAP;AAE+B,OAH7B,CALH,EAWE5F,IAXF,CAWO,IAXP,CADK,GAaL2F,iBAAiBhC,MAAMnF,GAAvB,EAA4B,KACzB0G,SADyB;AAE5BD;AAF4B,OAA5B;AAfG,KAAP;AAiBI,GAhCL,MAmCO;AACN,WAAO,IAAP;AAAO;AAAA;;MC7CIa,4BAA4B,UACxCnC,KADwC,EAIQ;AAAA,MAFhDkB,MAEgD,uEADkB,EAClB;;AAChD,MAAIC,eAAuBnB,KAAvBmB,CAAJ,EAAmC;AAClC,UAAM;AAAEiB,uBAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB;AAA0B,SAAOC;AAAjC,QAAiDnB,MAAvD;AAEA,WAAO;AACNY,WAAKV,SAASpB,MAAMnF,GAAf,EAAoBwH,WAApB,CADC;AAENN,cAAQO,wBAAwBtC,MAAMnF,GAA9B,EAAmC,KACvCwH,WADuC;AAE1CD;AAF0C,OAAnC;AAFF,KAAP;AAIE,GAPH,MAUO;AACN,WAAO,IAAP;AAAO;AAAA;;MCzDIG,WAAWzE","names":["asDate","dateOrTimestampField","length","Date","replace","documentToLinkField","prismicDocument","link_type","LinkType","Document","id","uid","type","tags","lang","url","slug","slugs","Object","keys","data","asLink","linkFieldOrDocument","linkResolver","linkField","Media","Web","resolvedURL","Any","asText","richTextField","separator","baseAsText","getLabel","node","label","serializeStandardTag","tag","children","join","serializePreFormatted","escapeHtml","text","serializeImage","imageTag","alt","copyright","linkTo","serializeHyperlink","RichTextNodeType","hyperlink","start","end","serializeEmbed","oembed","embed_url","provider_name","html","target","serializeSpan","content","createDefaultHTMLSerializer","_type","_key","Element","heading1","heading2","heading3","heading4","heading5","heading6","paragraph","preformatted","strong","em","listItem","oListItem","list","oList","image","embed","span","wrapMapSerializerWithStringChildren","mapSerializer","modifiedMapSerializer","tagSerializer","payload","wrapMapSerializer","asHTML","htmlSerializer","serializer","composeSerializers","key","serialize","isNonNullish","input","isNonEmptyArray","richText","field","title","imageThumbnail","thumbnail","link","linkToMedia","contentRelationship","date","timestamp","color","number","keyText","select","geoPoint","integrationFields","group","sliceZone","asImageSrc","params","isImageThumbnailFilled","buildURL","asImageWidthSrcSet","widths","urlParams","dimensions","_alt","_copyright","responsiveViews","responsiveViewObjects","values","src","srcset","buildWidthSrcSet","width","map","asImagePixelDensitySrcSet","pixelDensities","imgixParams","buildPixelDensitySrcSet","Elements"],"sources":["/Users/r/Desktop/portfolio-final/client/node_modules/@prismicio/helpers/src/asDate.ts","/Users/r/Desktop/portfolio-final/client/node_modules/@prismicio/helpers/src/documentToLinkField.ts","/Users/r/Desktop/portfolio-final/client/node_modules/@prismicio/helpers/src/asLink.ts","/Users/r/Desktop/portfolio-final/client/node_modules/@prismicio/helpers/src/asText.ts","/Users/r/Desktop/portfolio-final/client/node_modules/@prismicio/helpers/src/lib/serializerHelpers.ts","/Users/r/Desktop/portfolio-final/client/node_modules/@prismicio/helpers/src/asHTML.ts","/Users/r/Desktop/portfolio-final/client/node_modules/@prismicio/helpers/src/isFilled.ts","/Users/r/Desktop/portfolio-final/client/node_modules/@prismicio/helpers/src/asImageSrc.ts","/Users/r/Desktop/portfolio-final/client/node_modules/@prismicio/helpers/src/asImageWidthSrcSet.ts","/Users/r/Desktop/portfolio-final/client/node_modules/@prismicio/helpers/src/asImagePixelDensitySrcSet.ts","/Users/r/Desktop/portfolio-final/client/node_modules/@prismicio/helpers/src/index.ts"],"sourcesContent":["import type { DateField, TimestampField } from \"@prismicio/types\";\n\n/**\n * Transforms a date or timestamp field into a JavaScript Date object\n *\n * @param dateOrTimestampField - A date or timestamp field from Prismic\n *\n * @returns A Date object, null if provided date is falsy\n * @see Templating date field from Prismic {@link https://prismic.io/docs/technologies/templating-date-field-javascript}\n */\nexport const asDate = (\n\tdateOrTimestampField: DateField | TimestampField,\n): Date | null => {\n\tif (!dateOrTimestampField) {\n\t\treturn null;\n\t}\n\n\t// If field is a timestamp field...\n\tif (dateOrTimestampField.length === 24) {\n\t\t/**\n\t\t * Converts basic ISO 8601 to ECMAScript simplified ISO 8601 format for\n\t\t * browser compatibility issues\n\t\t *\n\t\t * From: YYYY-MM-DDTHH:mm:ssZ To: YYYY-MM-DDTHH:mm:ss.sssZ\n\t\t *\n\t\t * @see MDN documentation: {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#timestamp_string}\n\t\t * @see ECMAScript 2020 language specification: {@link https://262.ecma-international.org/11.0/#sec-date-time-string-format}\n\t\t * @see Related forum issue: {@link https://community.prismic.io/t/prismics-date-api/2520}\n\t\t * @see Regex101 expression: {@link https://regex101.com/r/jxyETT/1}\n\t\t */\n\t\treturn new Date(\n\t\t\tdateOrTimestampField.replace(/(\\+|-)(\\d{2})(\\d{2})$/, \".000$1$2:$3\"),\n\t\t);\n\t} else {\n\t\t// ...else field is a date field\n\t\treturn new Date(dateOrTimestampField);\n\t}\n};\n","import {\n\tFilledLinkToDocumentField,\n\tLinkType,\n\tPrismicDocument,\n} from \"@prismicio/types\";\n\ntype SetOptional<T, Keys extends keyof T> = Omit<T, Keys> &\n\tPartial<Pick<T, Keys>>;\n\n/**\n * Converts a document into a link field, this is useful when crawling the API\n * for document links\n *\n * @typeParam TDocument - Specific interface of the provided document\n * @param prismicDocument - A document coming from Prismic\n *\n * @returns The equivalent link field to use with `asLink()`\n * @internal\n */\nexport const documentToLinkField = <\n\tTDocument extends SetOptional<PrismicDocument, \"slugs\">,\n>(\n\tprismicDocument: TDocument,\n): FilledLinkToDocumentField<\n\tTDocument[\"type\"],\n\tTDocument[\"lang\"],\n\tTDocument[\"data\"]\n> => {\n\treturn {\n\t\tlink_type: LinkType.Document,\n\t\tid: prismicDocument.id,\n\t\tuid: prismicDocument.uid ?? undefined,\n\t\ttype: prismicDocument.type,\n\t\ttags: prismicDocument.tags,\n\t\tlang: prismicDocument.lang,\n\t\turl: prismicDocument.url ?? undefined,\n\t\tslug: prismicDocument.slugs?.[0], // Slug field is not available with GraphQl\n\t\t// The REST API does not include a `data` property if the data object is empty.\n\t\t...(Object.keys(prismicDocument.data).length > 0\n\t\t\t? { data: prismicDocument.data }\n\t\t\t: {}),\n\t};\n};\n","import { LinkField, LinkType, PrismicDocument } from \"@prismicio/types\";\nimport { documentToLinkField } from \"./documentToLinkField\";\nimport { LinkResolverFunction } from \"./types\";\n\n/**\n * Resolves any type of link field or document to a URL\n *\n * @typeParam LinkResolverFunctionReturnType - Link resolver function return type\n * @param linkFieldOrDocument - Any kind of link field or a document to resolve\n * @param linkResolver - An optional link resolver function, without it you're\n *   expected to use the `routes` options from the API\n *\n * @returns Resolved URL, null if provided link is empty\n * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}\n * @see Prismic API `routes` options documentation: {@link https://prismic.io/docs/technologies/route-resolver-nuxtjs}\n */\nexport const asLink = <LinkResolverFunctionReturnType = string>(\n\tlinkFieldOrDocument: LinkField | PrismicDocument,\n\tlinkResolver?: LinkResolverFunction<LinkResolverFunctionReturnType> | null,\n): LinkResolverFunctionReturnType | string | null => {\n\tif (!linkFieldOrDocument) {\n\t\treturn null;\n\t}\n\n\t// Converts document to link field if needed\n\tconst linkField = (\n\t\t\"link_type\" in linkFieldOrDocument\n\t\t\t? linkFieldOrDocument\n\t\t\t: documentToLinkField(linkFieldOrDocument)\n\t) as LinkField;\n\n\tswitch (linkField.link_type) {\n\t\tcase LinkType.Media:\n\t\tcase LinkType.Web:\n\t\t\treturn \"url\" in linkField ? linkField.url : null;\n\n\t\tcase LinkType.Document: {\n\t\t\tif (\"id\" in linkField && linkResolver) {\n\t\t\t\t// When using Link Resolver...\n\t\t\t\tconst resolvedURL = linkResolver(linkField);\n\n\t\t\t\tif (resolvedURL != null) {\n\t\t\t\t\treturn resolvedURL;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\"url\" in linkField && linkField.url) {\n\t\t\t\t// When using Route Resolver...\n\t\t\t\treturn linkField.url;\n\t\t\t}\n\n\t\t\t// When empty or Link Resolver and Route Resolver are not used...\n\t\t\treturn null;\n\t\t}\n\n\t\tcase LinkType.Any:\n\t\tdefault:\n\t\t\treturn null;\n\t}\n};\n","import { asText as baseAsText } from \"@prismicio/richtext\";\nimport { RichTextField } from \"@prismicio/types\";\n\n/**\n * Serializes a rich text or title field to a plain text string\n *\n * @param richTextField - A rich text or title field from Prismic\n * @param separator - Separator used to join each element, defaults to a space\n *\n * @returns Plain text equivalent of the provided rich text or title field\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}\n */\nexport const asText = (\n\trichTextField: RichTextField | null | undefined,\n\tseparator?: string,\n): string | null => {\n\tif (richTextField) {\n\t\treturn baseAsText(richTextField, separator);\n\t} else {\n\t\treturn null;\n\t}\n};\n","import escapeHtml from \"escape-html\";\nimport {\n\tRTBlockNode,\n\tRTInlineNode,\n\tRTPreformattedNode,\n\tRTImageNode,\n\tRTEmbedNode,\n\tRTLinkNode,\n\tLinkType,\n\tRichTextNodeType,\n} from \"@prismicio/types\";\n\nimport { asLink } from \"../asLink\";\nimport { LinkResolverFunction } from \"../types\";\n\nexport const getLabel = (node: RTBlockNode | RTInlineNode): string => {\n\treturn \"data\" in node && \"label\" in node.data\n\t\t? ` class=\"${node.data.label}\"`\n\t\t: \"\";\n};\n\nexport const serializeStandardTag = (\n\ttag: string,\n\tnode: RTBlockNode | RTInlineNode,\n\tchildren: string[],\n): string => {\n\treturn `<${tag}${getLabel(node)}>${children.join(\"\")}</${tag}>`;\n};\n\nexport const serializePreFormatted = (node: RTPreformattedNode): string => {\n\treturn `<pre${getLabel(node)}>${escapeHtml(node.text)}</pre>`;\n};\n\nexport const serializeImage = (\n\tlinkResolver: LinkResolverFunction<string> | undefined | null,\n\tnode: RTImageNode,\n): string => {\n\tlet imageTag = `<img src=\"${node.url}\" alt=\"${escapeHtml(node.alt)}\"${\n\t\tnode.copyright ? ` copyright=\"${escapeHtml(node.copyright)}\"` : \"\"\n\t} />`;\n\n\t// If the image has a link, we wrap it with an anchor tag\n\tif (node.linkTo) {\n\t\timageTag = serializeHyperlink(\n\t\t\tlinkResolver,\n\t\t\t{\n\t\t\t\ttype: RichTextNodeType.hyperlink,\n\t\t\t\tdata: node.linkTo,\n\t\t\t\tstart: 0,\n\t\t\t\tend: 0,\n\t\t\t},\n\t\t\t[imageTag],\n\t\t);\n\t}\n\n\treturn `<p class=\"block-img\">${imageTag}</p>`;\n};\n\nexport const serializeEmbed = (node: RTEmbedNode): string => {\n\treturn `<div data-oembed=\"${node.oembed.embed_url}\" data-oembed-type=\"${\n\t\tnode.oembed.type\n\t}\" data-oembed-provider=\"${node.oembed.provider_name}\"${getLabel(node)}>${\n\t\tnode.oembed.html\n\t}</div>`;\n};\n\nexport const serializeHyperlink = (\n\tlinkResolver: LinkResolverFunction | undefined | null,\n\tnode: RTLinkNode,\n\tchildren: string[],\n): string => {\n\tswitch (node.data.link_type) {\n\t\tcase LinkType.Web: {\n\t\t\treturn `<a href=\"${escapeHtml(node.data.url)}\" target=\"${\n\t\t\t\tnode.data.target\n\t\t\t}\" rel=\"noopener noreferrer\"${getLabel(node)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Document: {\n\t\t\treturn `<a href=\"${asLink(node.data, linkResolver)}\"${getLabel(\n\t\t\t\tnode,\n\t\t\t)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Media: {\n\t\t\treturn `<a href=\"${node.data.url}\"${getLabel(node)}>${children.join(\n\t\t\t\t\"\",\n\t\t\t)}</a>`;\n\t\t}\n\t}\n};\n\nexport const serializeSpan = (content?: string): string => {\n\treturn content ? escapeHtml(content).replace(/\\n/g, \"<br />\") : \"\";\n};\n","import {\n\tserialize,\n\tElement,\n\tcomposeSerializers,\n\tRichTextFunctionSerializer,\n\tRichTextMapSerializer,\n\twrapMapSerializer,\n} from \"@prismicio/richtext\";\nimport { RichTextField } from \"@prismicio/types\";\n\nimport {\n\tserializeStandardTag,\n\tserializePreFormatted,\n\tserializeImage,\n\tserializeEmbed,\n\tserializeHyperlink,\n\tserializeSpan,\n} from \"./lib/serializerHelpers\";\nimport {\n\tHTMLFunctionSerializer,\n\tHTMLMapSerializer,\n\tLinkResolverFunction,\n} from \"./types\";\n\n/**\n * Creates a default HTML serializer with a given Link Resolver providing\n * sensible and safe defaults for every node type\n *\n * @internal\n */\nconst createDefaultHTMLSerializer = (\n\tlinkResolver: LinkResolverFunction<string> | undefined | null,\n): RichTextFunctionSerializer<string> => {\n\treturn (_type, node, text, children, _key) => {\n\t\tswitch (node.type) {\n\t\t\tcase Element.heading1:\n\t\t\t\treturn serializeStandardTag(\"h1\", node, children);\n\t\t\tcase Element.heading2:\n\t\t\t\treturn serializeStandardTag(\"h2\", node, children);\n\t\t\tcase Element.heading3:\n\t\t\t\treturn serializeStandardTag(\"h3\", node, children);\n\t\t\tcase Element.heading4:\n\t\t\t\treturn serializeStandardTag(\"h4\", node, children);\n\t\t\tcase Element.heading5:\n\t\t\t\treturn serializeStandardTag(\"h5\", node, children);\n\t\t\tcase Element.heading6:\n\t\t\t\treturn serializeStandardTag(\"h6\", node, children);\n\t\t\tcase Element.paragraph:\n\t\t\t\treturn serializeStandardTag(\"p\", node, children);\n\t\t\tcase Element.preformatted:\n\t\t\t\treturn serializePreFormatted(node);\n\t\t\tcase Element.strong:\n\t\t\t\treturn serializeStandardTag(\"strong\", node, children);\n\t\t\tcase Element.em:\n\t\t\t\treturn serializeStandardTag(\"em\", node, children);\n\t\t\tcase Element.listItem:\n\t\t\t\treturn serializeStandardTag(\"li\", node, children);\n\t\t\tcase Element.oListItem:\n\t\t\t\treturn serializeStandardTag(\"li\", node, children);\n\t\t\tcase Element.list:\n\t\t\t\treturn serializeStandardTag(\"ul\", node, children);\n\t\t\tcase Element.oList:\n\t\t\t\treturn serializeStandardTag(\"ol\", node, children);\n\t\t\tcase Element.image:\n\t\t\t\treturn serializeImage(linkResolver, node);\n\t\t\tcase Element.embed:\n\t\t\t\treturn serializeEmbed(node);\n\t\t\tcase Element.hyperlink:\n\t\t\t\treturn serializeHyperlink(linkResolver, node, children);\n\t\t\tcase Element.label:\n\t\t\t\treturn serializeStandardTag(\"span\", node, children);\n\t\t\tcase Element.span:\n\t\t\tdefault:\n\t\t\t\treturn serializeSpan(text);\n\t\t}\n\t};\n};\n\n/**\n * Wraps a map serializer into a regular function serializer. The given map\n * serializer should accept children as a string, not as an array of strings\n * like `@prismicio/richtext`'s `wrapMapSerializer`.\n *\n * @param mapSerializer - Map serializer to wrap\n *\n * @returns A regular function serializer\n */\nconst wrapMapSerializerWithStringChildren = (\n\tmapSerializer: HTMLMapSerializer,\n): RichTextFunctionSerializer<string> => {\n\tconst modifiedMapSerializer = {} as RichTextMapSerializer<string>;\n\n\tfor (const tag in mapSerializer) {\n\t\tconst tagSerializer = mapSerializer[tag as keyof typeof mapSerializer];\n\n\t\tif (tagSerializer) {\n\t\t\tmodifiedMapSerializer[tag as keyof typeof mapSerializer] = (payload) => {\n\t\t\t\treturn tagSerializer({\n\t\t\t\t\t...payload,\n\t\t\t\t\t// @ts-expect-error - merging blockSerializer types causes TS to bail to a never type\n\t\t\t\t\tchildren: payload.children.join(\"\"),\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t}\n\n\treturn wrapMapSerializer(modifiedMapSerializer);\n};\n\n/**\n * Serializes a rich text or title field to an HTML string\n *\n * @param richTextField - A rich text or title field from Prismic\n * @param linkResolver - An optional link resolver function to resolve links,\n *   without it you're expected to use the `routes` options from the API\n * @param htmlSerializer - An optional serializer, unhandled cases will fallback\n *   to the default serializer\n *\n * @returns HTML equivalent of the provided rich text or title field\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}\n */\nexport const asHTML = (\n\trichTextField: RichTextField | null | undefined,\n\tlinkResolver?: LinkResolverFunction<string> | null,\n\thtmlSerializer?: HTMLFunctionSerializer | HTMLMapSerializer | null,\n): string | null => {\n\tif (richTextField) {\n\t\tlet serializer: RichTextFunctionSerializer<string>;\n\t\tif (htmlSerializer) {\n\t\t\tserializer = composeSerializers(\n\t\t\t\ttypeof htmlSerializer === \"object\"\n\t\t\t\t\t? wrapMapSerializerWithStringChildren(htmlSerializer)\n\t\t\t\t\t: (type, node, text, children, key) =>\n\t\t\t\t\t\t\thtmlSerializer(type, node, text, children.join(\"\"), key),\n\t\t\t\tcreateDefaultHTMLSerializer(linkResolver),\n\t\t\t);\n\t\t} else {\n\t\t\tserializer = createDefaultHTMLSerializer(linkResolver);\n\t\t}\n\n\t\treturn serialize(richTextField, serializer).join(\"\");\n\t} else {\n\t\treturn null;\n\t}\n};\n","import type {\n\tAnyRegularField,\n\tColorField,\n\tDateField,\n\tEmbedField,\n\tGeoPointField,\n\tGroupField,\n\tImageField,\n\tImageFieldImage,\n\tIntegrationFields,\n\tKeyTextField,\n\tLinkField,\n\tLinkToMediaField,\n\tNumberField,\n\tRelationField,\n\tRichTextField,\n\tSelectField,\n\tSharedSlice,\n\tSlice,\n\tSliceZone,\n\tTimestampField,\n\tTitleField,\n} from \"@prismicio/types\";\n\n/**\n * Determines if a value is not nullish (i.e. not `null` or `undefined`). This\n * is used to check if nullable field values are filled.\n *\n * @param input - The value to check.\n *\n * @returns `true` if `input` is not nullish, `false` otherwise.\n */\nconst isNonNullish = <T>(input: T): input is NonNullable<T> => {\n\treturn input != null;\n};\n\n/**\n * Determines if an array is not empty. This is used to check if array-based\n * fields are filled.\n *\n * @param input - The array to check.\n *\n * @returns `true` if `input` has at least one element, `false` otherwise.\n */\nconst isNonEmptyArray = <T>(input: T[]): input is [T, ...T[]] => {\n\treturn !!input.length;\n};\n\n/**\n * Determines if a Rich Text field is filled.\n *\n * @param field - Rich Text field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const richText = (\n\tfield: RichTextField,\n): field is RichTextField<\"filled\"> => {\n\tif (field.length === 1 && \"text\" in field[0]) {\n\t\treturn !!field[0].text;\n\t} else {\n\t\treturn !!field.length;\n\t}\n};\n\n/**\n * Determines if a Title field is filled.\n *\n * @param field - Title field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const title = richText as (\n\tfield: TitleField,\n) => field is TitleField<\"filled\">;\n\n/**\n * Determines if an Image thumbnail is filled.\n *\n * @param field - Image thumbnail to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const imageThumbnail = (\n\tthumbnail: ImageFieldImage,\n): thumbnail is ImageFieldImage<\"filled\"> => {\n\treturn !!thumbnail.url;\n};\n\n/**\n * Determines if an Image field is filled.\n *\n * @param field - Image field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const image = <ThumbnailNames extends string | null>(\n\tfield: ImageField<ThumbnailNames>,\n): field is ImageField<ThumbnailNames, \"filled\"> => {\n\treturn imageThumbnail(field);\n};\n\n/**\n * Determines if a Link field is filled.\n *\n * @param field - Link field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const link = <\n\tTypeEnum = string,\n\tLangEnum = string,\n\tDataInterface extends Record<\n\t\tstring,\n\t\tAnyRegularField | GroupField | SliceZone\n\t> = never,\n>(\n\tfield: LinkField<TypeEnum, LangEnum, DataInterface>,\n): field is LinkField<TypeEnum, LangEnum, DataInterface, \"filled\"> => {\n\treturn \"id\" in field || \"url\" in field;\n};\n\n/**\n * Determines if a Link to Media field is filled.\n *\n * @param field - Link to Media field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const linkToMedia = link as (\n\tfield: LinkToMediaField,\n) => field is LinkToMediaField<\"filled\">;\n\n/**\n * Determines if a Content Relationship field is filled.\n *\n * @param field - Content Relationship field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const contentRelationship = link as <\n\tTypeEnum = string,\n\tLangEnum = string,\n\tDataInterface extends Record<\n\t\tstring,\n\t\tAnyRegularField | GroupField | SliceZone\n\t> = never,\n>(\n\tfield: RelationField<TypeEnum, LangEnum, DataInterface>,\n) => field is RelationField<TypeEnum, LangEnum, DataInterface, \"filled\">;\n\n/**\n * Determines if a Date field is filled.\n *\n * @param field - Date field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const date = isNonNullish as (\n\tfield: DateField,\n) => field is DateField<\"filled\">;\n\n/**\n * Determines if a Timestamp field is filled.\n *\n * @param field - Timestamp field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const timestamp = isNonNullish as (\n\tfield: TimestampField,\n) => field is TimestampField<\"filled\">;\n\n/**\n * Determines if a Color field is filled.\n *\n * @param field - Color field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const color = isNonNullish as (\n\tfield: ColorField,\n) => field is ColorField<\"filled\">;\n\n/**\n * Determines if a Number field is filled.\n *\n * @param field - Number field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const number = isNonNullish as (\n\tfield: NumberField,\n) => field is NumberField<\"filled\">;\n\n/**\n * Determines if a Key Text field is filled.\n *\n * @param field - Key Text field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const keyText = isNonNullish as (\n\tfield: KeyTextField,\n) => field is KeyTextField<\"filled\">;\n\n/**\n * Determines if a Select field is filled.\n *\n * @param field - Select field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const select = isNonNullish as <Enum extends string>(\n\tfield: SelectField<Enum>,\n) => field is SelectField<Enum, \"filled\">;\n\n/**\n * Determines if an Embed field is filled.\n *\n * @param field - Embed field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const embed = <Data extends Record<string, unknown>>(\n\tfield: EmbedField<Data>,\n): field is EmbedField<Data, \"filled\"> => {\n\treturn !!field.embed_url;\n};\n\n/**\n * Determines if a GeoPoint field is filled.\n *\n * @param field - GeoPoint field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const geoPoint = (\n\tfield: GeoPointField,\n): field is GeoPointField<\"filled\"> => {\n\treturn \"longitude\" in field;\n};\n\n/**\n * Determines if an Integration Fields field is filled.\n *\n * @param field - Integration Fields field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const integrationFields = isNonNullish as <Blob>(\n\tfield: IntegrationFields<Blob>,\n) => field is IntegrationFields<Blob, \"filled\">;\n\n/**\n * Determines if a Group has at least one item.\n *\n * @param group - Group to check.\n *\n * @returns `true` if `group` contains at least one item, `false` otherwise.\n */\nexport const group = isNonEmptyArray as <\n\tFields extends Record<string, AnyRegularField>,\n>(\n\tgroup: GroupField<Fields>,\n) => group is GroupField<Fields, \"filled\">;\n\n/**\n * Determines if a Slice Zone has at least one Slice.\n *\n * @param slices - Slice Zone to check.\n *\n * @returns `true` if `slices` contains at least one Slice, `false` otherwise.\n */\nexport const sliceZone = isNonEmptyArray as <\n\tSlices extends Slice | SharedSlice,\n>(\n\tslices: SliceZone<Slices>,\n) => slices is SliceZone<Slices, \"filled\">;\n","import { ImageFieldImage } from \"@prismicio/types\";\nimport { buildURL, ImgixURLParams } from \"imgix-url-builder\";\n\nimport { imageThumbnail as isImageThumbnailFilled } from \"./isFilled\";\n\n/**\n * The return type of `asImageSrc()`.\n */\ntype AsImageSrcReturnType<Field extends ImageFieldImage> =\n\tField extends ImageFieldImage<\"empty\"> ? null : string;\n\n/**\n * Returns the URL of an Image field with optional image transformations (via\n * Imgix URL parameters).\n *\n * @example\n *\n * ```ts\n * const src = asImageSrc(document.data.imageField, { sat: -100 });\n * // => https://images.prismic.io/repo/image.png?sat=-100\n * ```\n *\n * @param field - Image field (or one of its responsive views) from which to get\n *   an image URL.\n * @param params - An object of Imgix URL API parameters to transform the image.\n *\n * @returns The Image field's image URL with transformations applied (if given).\n *   If the Image field is empty, `null` is returned.\n * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering\n */\nexport const asImageSrc = <Field extends ImageFieldImage>(\n\tfield: Field,\n\tparams: ImgixURLParams = {},\n): AsImageSrcReturnType<Field> => {\n\tif (isImageThumbnailFilled(field)) {\n\t\treturn buildURL(field.url, params) as AsImageSrcReturnType<Field>;\n\t} else {\n\t\treturn null as AsImageSrcReturnType<Field>;\n\t}\n};\n","import { ImageFieldImage } from \"@prismicio/types\";\nimport {\n\tbuildURL,\n\tbuildWidthSrcSet,\n\tBuildWidthSrcSetParams,\n} from \"imgix-url-builder\";\n\nimport { imageThumbnail as isImageThumbnailFilled } from \"./isFilled\";\n\n/**\n * The return type of `asImageWidthSrcSet()`.\n */\ntype AsImageWidthSrcSetReturnType<Field extends ImageFieldImage> =\n\tField extends ImageFieldImage<\"empty\">\n\t\t? null\n\t\t: {\n\t\t\t\t/**\n\t\t\t\t * The Image field's image URL with Imgix URL parameters (if given).\n\t\t\t\t */\n\t\t\t\tsrc: string;\n\n\t\t\t\t/**\n\t\t\t\t * A width-based `srcset` attribute value for the Image field's image\n\t\t\t\t * with Imgix URL parameters (if given).\n\t\t\t\t */\n\t\t\t\tsrcset: string;\n\t\t  };\n\n/**\n * Creates a width-based `srcset` from an Image field with optional image\n * transformations (via Imgix URL parameters).\n *\n * If the Image field contains responsive views, each responsive view is used as\n * a width in the resulting `srcset`.\n *\n * If a `widths` parameter is not given, the following widths will be used by\n * default: 640, 750, 828, 1080, 1200, 1920, 2048, 3840.\n *\n * @example\n *\n * ```ts\n * const srcset = asImageWidthSrcSet(document.data.imageField, {\n * \twidths: [400, 800, 1600],\n * \tsat: -100,\n * });\n * // => {\n * //   src:    'https://images.prismic.io/repo/image.png?sat=-100',\n * //   srcset: 'https://images.prismic.io/repo/image.png?sat=-100&width=400 400w, ' +\n * //           'https://images.prismic.io/repo/image.png?sat=-100&width=800 800w,' +\n * //           'https://images.prismic.io/repo/image.png?sat=-100&width=1600 1600w'\n * // }\n * ```\n *\n * @param field - Image field (or one of its responsive views) from which to get\n *   an image URL.\n * @param params - An object of Imgix URL API parameters. The `widths` parameter\n *   defines the resulting `srcset` widths.\n *\n * @returns A `srcset` attribute value for the Image field with Imgix URL\n *   parameters (if given). If the Image field is empty, `null` is returned.\n * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering\n */\nexport const asImageWidthSrcSet = <Field extends ImageFieldImage>(\n\tfield: Field,\n\tparams: Omit<BuildWidthSrcSetParams, \"widths\"> &\n\t\tPartial<Pick<BuildWidthSrcSetParams, \"widths\">> = {},\n): AsImageWidthSrcSetReturnType<Field> => {\n\tif (isImageThumbnailFilled(field)) {\n\t\tconst { widths = [640, 828, 1200, 2048, 3840], ...urlParams } = params;\n\t\tconst {\n\t\t\turl,\n\t\t\tdimensions,\n\t\t\talt: _alt,\n\t\t\tcopyright: _copyright,\n\t\t\t...responsiveViews\n\t\t} = field;\n\n\t\t// The Prismic Rest API will always return thumbnail values if\n\t\t// the base size is filled.\n\t\tconst responsiveViewObjects: ImageFieldImage<\"filled\">[] =\n\t\t\tObject.values(responsiveViews);\n\n\t\treturn {\n\t\t\tsrc: buildURL(url, urlParams),\n\t\t\tsrcset: responsiveViewObjects.length\n\t\t\t\t? [\n\t\t\t\t\t\tbuildWidthSrcSet(url, {\n\t\t\t\t\t\t\t...urlParams,\n\t\t\t\t\t\t\twidths: [dimensions.width],\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t...responsiveViewObjects.map((thumbnail) => {\n\t\t\t\t\t\t\treturn buildWidthSrcSet(thumbnail.url, {\n\t\t\t\t\t\t\t\t...urlParams,\n\t\t\t\t\t\t\t\twidths: [thumbnail.dimensions.width],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}),\n\t\t\t\t  ].join(\", \")\n\t\t\t\t: buildWidthSrcSet(field.url, {\n\t\t\t\t\t\t...urlParams,\n\t\t\t\t\t\twidths,\n\t\t\t\t  }),\n\t\t} as AsImageWidthSrcSetReturnType<Field>;\n\t} else {\n\t\treturn null as AsImageWidthSrcSetReturnType<Field>;\n\t}\n};\n","import { ImageFieldImage } from \"@prismicio/types\";\nimport {\n\tbuildPixelDensitySrcSet,\n\tBuildPixelDensitySrcSetParams,\n\tbuildURL,\n} from \"imgix-url-builder\";\n\nimport { imageThumbnail as isImageThumbnailFilled } from \"./isFilled\";\n\n/**\n * The return type of `asImagePixelDensitySrcSet()`.\n */\ntype AsImagePixelDensitySrcSetReturnType<Field extends ImageFieldImage> =\n\tField extends ImageFieldImage<\"empty\">\n\t\t? null\n\t\t: {\n\t\t\t\t/**\n\t\t\t\t * The Image field's image URL with Imgix URL parameters (if given).\n\t\t\t\t */\n\t\t\t\tsrc: string;\n\n\t\t\t\t/**\n\t\t\t\t * A pixel-densitye-based `srcset` attribute value for the Image field's\n\t\t\t\t * image with Imgix URL parameters (if given).\n\t\t\t\t */\n\t\t\t\tsrcset: string;\n\t\t  };\n\n/**\n * Creates a pixel-density-based `srcset` from an Image field with optional\n * image transformations (via Imgix URL parameters).\n *\n * If a `pixelDensities` parameter is not given, the following pixel densities\n * will be used by default: 1, 2, 3.\n *\n * @example\n *\n * ```ts\n * const srcset = asImagePixelDensitySrcSet(document.data.imageField, {\n * \tpixelDensities: [1, 2],\n * \tsat: -100,\n * });\n * // => {\n * //   src:    'https://images.prismic.io/repo/image.png?sat=-100',\n * //   srcset: 'https://images.prismic.io/repo/image.png?sat=-100&dpr=1 1x, ' +\n * //           'https://images.prismic.io/repo/image.png?sat=-100&dpr=2 2x'\n * // }\n * ```\n *\n * @param field - Image field (or one of its responsive views) from which to get\n *   an image URL.\n * @param params - An object of Imgix URL API parameters. The `pixelDensities`\n *   parameter defines the resulting `srcset` widths.\n *\n * @returns A `srcset` attribute value for the Image field with Imgix URL\n *   parameters (if given). If the Image field is empty, `null` is returned.\n * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering\n */\nexport const asImagePixelDensitySrcSet = <Field extends ImageFieldImage>(\n\tfield: Field,\n\tparams: Omit<BuildPixelDensitySrcSetParams, \"pixelDensities\"> &\n\t\tPartial<Pick<BuildPixelDensitySrcSetParams, \"pixelDensities\">> = {},\n): AsImagePixelDensitySrcSetReturnType<Field> => {\n\tif (isImageThumbnailFilled(field)) {\n\t\tconst { pixelDensities = [1, 2, 3], ...imgixParams } = params;\n\n\t\treturn {\n\t\t\tsrc: buildURL(field.url, imgixParams),\n\t\t\tsrcset: buildPixelDensitySrcSet(field.url, {\n\t\t\t\t...imgixParams,\n\t\t\t\tpixelDensities,\n\t\t\t}),\n\t\t} as AsImagePixelDensitySrcSetReturnType<Field>;\n\t} else {\n\t\treturn null as AsImagePixelDensitySrcSetReturnType<Field>;\n\t}\n};\n","export { asDate } from \"./asDate\";\nexport { asLink } from \"./asLink\";\nexport { asText } from \"./asText\";\nexport { asHTML } from \"./asHTML\";\nexport { asImageSrc } from \"./asImageSrc\";\nexport { asImageWidthSrcSet } from \"./asImageWidthSrcSet\";\nexport { asImagePixelDensitySrcSet } from \"./asImagePixelDensitySrcSet\";\nexport * as isFilled from \"./isFilled\";\n\nexport { documentToLinkField } from \"./documentToLinkField\";\n\nimport { Element } from \"@prismicio/richtext\";\nexport { Element };\n/**\n * @deprecated Renamed to `Element` (without an \"s\").\n */\n// TODO: Remove in v3.\nexport const Elements = Element;\n\nexport type {\n\tLinkResolverFunction,\n\tHTMLFunctionSerializer,\n\tHTMLMapSerializer,\n} from \"./types\";\n"]},"metadata":{},"sourceType":"module"}